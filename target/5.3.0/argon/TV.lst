
/Users/admin/Documents/CTD_2023/Personal_Projects/TV/target/5.3.0/argon/TV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c3c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5c58  000b5c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e558  000b5c7c  0000e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000220  2003e5d0  2003e5d0  0001e5d0  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000b5cf4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5cf8  000b5cf8  00015cf8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5cfe  000b5cfe  00015cfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5d22  000b5d22  00015d22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00101c92  00000000  00000000  00015d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010179  00000000  00000000  001179b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000350b1  00000000  00000000  00127b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002740  00000000  00000000  0015cbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a048  00000000  00000000  0015f322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034990  00000000  00000000  0016936a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036c0a  00000000  00000000  0019dcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013d800  00000000  00000000  001d4904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007014  00000000  00000000  00312104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_d2iz>:
   b4394:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b439c:	d215      	bcs.n	b43ca <__aeabi_d2iz+0x36>
   b439e:	d511      	bpl.n	b43c4 <__aeabi_d2iz+0x30>
   b43a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b43a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b43a8:	d912      	bls.n	b43d0 <__aeabi_d2iz+0x3c>
   b43aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b43ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b43b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b43b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b43ba:	fa23 f002 	lsr.w	r0, r3, r2
   b43be:	bf18      	it	ne
   b43c0:	4240      	negne	r0, r0
   b43c2:	4770      	bx	lr
   b43c4:	f04f 0000 	mov.w	r0, #0
   b43c8:	4770      	bx	lr
   b43ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b43ce:	d105      	bne.n	b43dc <__aeabi_d2iz+0x48>
   b43d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b43d4:	bf08      	it	eq
   b43d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b43da:	4770      	bx	lr
   b43dc:	f04f 0000 	mov.w	r0, #0
   b43e0:	4770      	bx	lr
   b43e2:	bf00      	nop

000b43e4 <strlen>:
   b43e4:	4603      	mov	r3, r0
   b43e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b43ea:	2a00      	cmp	r2, #0
   b43ec:	d1fb      	bne.n	b43e6 <strlen+0x2>
   b43ee:	1a18      	subs	r0, r3, r0
   b43f0:	3801      	subs	r0, #1
   b43f2:	4770      	bx	lr

000b43f4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43f4:	4809      	ldr	r0, [pc, #36]	; (b441c <module_user_pre_init+0x28>)
   b43f6:	490a      	ldr	r1, [pc, #40]	; (b4420 <module_user_pre_init+0x2c>)
   b43f8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b43fa:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43fc:	d005      	beq.n	b440a <module_user_pre_init+0x16>
   b43fe:	4a09      	ldr	r2, [pc, #36]	; (b4424 <module_user_pre_init+0x30>)
   b4400:	4282      	cmp	r2, r0
   b4402:	d002      	beq.n	b440a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4404:	1a12      	subs	r2, r2, r0
   b4406:	f001 fa61 	bl	b58cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b440a:	4807      	ldr	r0, [pc, #28]	; (b4428 <module_user_pre_init+0x34>)
   b440c:	4a07      	ldr	r2, [pc, #28]	; (b442c <module_user_pre_init+0x38>)
   b440e:	2100      	movs	r1, #0
   b4410:	1a12      	subs	r2, r2, r0
   b4412:	f001 fa69 	bl	b58e8 <memset>
    return &link_global_data_start;
}
   b4416:	4801      	ldr	r0, [pc, #4]	; (b441c <module_user_pre_init+0x28>)
   b4418:	bd08      	pop	{r3, pc}
   b441a:	bf00      	nop
   b441c:	2003e558 	.word	0x2003e558
   b4420:	000b5c7c 	.word	0x000b5c7c
   b4424:	2003e5d0 	.word	0x2003e5d0
   b4428:	2003e5d0 	.word	0x2003e5d0
   b442c:	2003e7f0 	.word	0x2003e7f0

000b4430 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4430:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4432:	4e07      	ldr	r6, [pc, #28]	; (b4450 <module_user_init+0x20>)
   b4434:	4c07      	ldr	r4, [pc, #28]	; (b4454 <module_user_init+0x24>)
    module_user_init_hook();
   b4436:	f001 f8f7 	bl	b5628 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b443a:	1ba4      	subs	r4, r4, r6
   b443c:	08a4      	lsrs	r4, r4, #2
   b443e:	2500      	movs	r5, #0
   b4440:	42ac      	cmp	r4, r5
   b4442:	d100      	bne.n	b4446 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4444:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4446:	f856 3b04 	ldr.w	r3, [r6], #4
   b444a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b444c:	3501      	adds	r5, #1
   b444e:	e7f7      	b.n	b4440 <module_user_init+0x10>
   b4450:	000b5c34 	.word	0x000b5c34
   b4454:	000b5c58 	.word	0x000b5c58

000b4458 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4458:	f000 bac4 	b.w	b49e4 <setup>

000b445c <module_user_loop>:
}

void module_user_loop() {
   b445c:	b508      	push	{r3, lr}
    loop();
   b445e:	f000 f9ab 	bl	b47b8 <loop>
    _post_loop();
}
   b4462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4466:	f001 b897 	b.w	b5598 <_post_loop>

000b446a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b446a:	f000 bcf3 	b.w	b4e54 <malloc>

000b446e <_Znaj>:
   b446e:	f000 bcf1 	b.w	b4e54 <malloc>

000b4472 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4472:	f000 bcf7 	b.w	b4e64 <free>

000b4476 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4476:	7800      	ldrb	r0, [r0, #0]
   b4478:	fab0 f080 	clz	r0, r0
   b447c:	0940      	lsrs	r0, r0, #5
   b447e:	4770      	bx	lr

000b4480 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4480:	2301      	movs	r3, #1
   b4482:	7003      	strb	r3, [r0, #0]
   b4484:	4770      	bx	lr

000b4486 <_ZN3LED6updateEv>:
    pin = PIN;
    pinMode(pin, OUTPUT);
  }
  void update()
  {
    digitalWrite(pin, val);
   b4486:	7801      	ldrb	r1, [r0, #0]
   b4488:	8840      	ldrh	r0, [r0, #2]
   b448a:	f001 b94e 	b.w	b572a <digitalWrite>

000b448e <_ZN6Button6updateEv>:
    updates.push_back(std::bind(&Button::update, this));
    pin = PIN;
    pinMode(pin, INPUT);
  }
  bool once = true;
  void update()
   b448e:	b510      	push	{r4, lr}
  {
    clicked = false;
   b4490:	2100      	movs	r1, #0
  void update()
   b4492:	4604      	mov	r4, r0
    clicked = false;
   b4494:	7081      	strb	r1, [r0, #2]
    pinMode(pin, INPUT);
   b4496:	8880      	ldrh	r0, [r0, #4]
   b4498:	f001 f936 	bl	b5708 <pinMode>
    if (digitalRead(pin) == HIGH && !bDown)
   b449c:	88a0      	ldrh	r0, [r4, #4]
   b449e:	f001 f95d 	bl	b575c <digitalRead>
   b44a2:	2801      	cmp	r0, #1
   b44a4:	d10a      	bne.n	b44bc <_ZN6Button6updateEv+0x2e>
   b44a6:	7823      	ldrb	r3, [r4, #0]
   b44a8:	b943      	cbnz	r3, b44bc <_ZN6Button6updateEv+0x2e>
    {
      bDown = true;
      if (once)
   b44aa:	79a2      	ldrb	r2, [r4, #6]
      bDown = true;
   b44ac:	7020      	strb	r0, [r4, #0]
      if (once)
   b44ae:	b10a      	cbz	r2, b44b4 <_ZN6Button6updateEv+0x26>
      {
        clicked = true;
   b44b0:	70a0      	strb	r0, [r4, #2]
        once = false;
   b44b2:	71a3      	strb	r3, [r4, #6]
      }
      val = !val;
   b44b4:	7863      	ldrb	r3, [r4, #1]
   b44b6:	f083 0301 	eor.w	r3, r3, #1
   b44ba:	7063      	strb	r3, [r4, #1]
    }
    if (digitalRead(pin) == LOW)
   b44bc:	88a0      	ldrh	r0, [r4, #4]
   b44be:	f001 f94d 	bl	b575c <digitalRead>
   b44c2:	b910      	cbnz	r0, b44ca <_ZN6Button6updateEv+0x3c>
    {
      bDown = false;
      once = true;
   b44c4:	2301      	movs	r3, #1
      bDown = false;
   b44c6:	7020      	strb	r0, [r4, #0]
      once = true;
   b44c8:	71a3      	strb	r3, [r4, #6]
    }
  }
   b44ca:	bd10      	pop	{r4, pc}

000b44cc <_ZN13Potentiometer6updateEv>:
    pin = PIN;
    pinMode(pin, INPUT);
    updates.push_back(std::bind(&Potentiometer::update, this));
  }
  int val = analogRead(pin);
  void update()
   b44cc:	b510      	push	{r4, lr}
   b44ce:	4604      	mov	r4, r0
  {
    val = analogRead(pin);
   b44d0:	8800      	ldrh	r0, [r0, #0]
   b44d2:	f001 f956 	bl	b5782 <analogRead>
   b44d6:	6060      	str	r0, [r4, #4]
  }
   b44d8:	bd10      	pop	{r4, pc}

000b44da <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b44da:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b44dc:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b44de:	685a      	ldr	r2, [r3, #4]
   b44e0:	6899      	ldr	r1, [r3, #8]
   b44e2:	681b      	ldr	r3, [r3, #0]
   b44e4:	1054      	asrs	r4, r2, #1
   b44e6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b44ea:	07d2      	lsls	r2, r2, #31
   b44ec:	bf48      	it	mi
   b44ee:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b44f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b44f4:	bf48      	it	mi
   b44f6:	58d3      	ldrmi	r3, [r2, r3]
   b44f8:	4718      	bx	r3

000b44fa <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b44fa:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b44fc:	6803      	ldr	r3, [r0, #0]
   b44fe:	685a      	ldr	r2, [r3, #4]
   b4500:	6899      	ldr	r1, [r3, #8]
   b4502:	681b      	ldr	r3, [r3, #0]
   b4504:	1054      	asrs	r4, r2, #1
   b4506:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b450a:	07d2      	lsls	r2, r2, #31
   b450c:	bf48      	it	mi
   b450e:	590a      	ldrmi	r2, [r1, r4]
      }
   b4510:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4514:	bf48      	it	mi
   b4516:	58d3      	ldrmi	r3, [r2, r3]
   b4518:	4718      	bx	r3

000b451a <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b451a:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b451c:	6803      	ldr	r3, [r0, #0]
   b451e:	685a      	ldr	r2, [r3, #4]
   b4520:	6899      	ldr	r1, [r3, #8]
   b4522:	681b      	ldr	r3, [r3, #0]
   b4524:	1054      	asrs	r4, r2, #1
   b4526:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b452a:	07d2      	lsls	r2, r2, #31
   b452c:	bf48      	it	mi
   b452e:	590a      	ldrmi	r2, [r1, r4]
      }
   b4530:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4534:	bf48      	it	mi
   b4536:	58d3      	ldrmi	r3, [r2, r3]
   b4538:	4718      	bx	r3

000b453a <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b453a:	b513      	push	{r0, r1, r4, lr}
   b453c:	460a      	mov	r2, r1
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b453e:	4603      	mov	r3, r0
   b4540:	b1b0      	cbz	r0, b4570 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0+0x36>
    _Function_base() : _M_manager(nullptr) { }
   b4542:	2100      	movs	r1, #0
   b4544:	6081      	str	r1, [r0, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4546:	e892 0003 	ldmia.w	r2, {r0, r1}
   b454a:	466c      	mov	r4, sp
   b454c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4550:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4554:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4558:	e894 0003 	ldmia.w	r4, {r0, r1}
   b455c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4560:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4562:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4564:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4566:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4568:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b456a:	68d8      	ldr	r0, [r3, #12]
   b456c:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b456e:	60d9      	str	r1, [r3, #12]
   b4570:	b002      	add	sp, #8
   b4572:	bd10      	pop	{r4, pc}

000b4574 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4574:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4576:	b538      	push	{r3, r4, r5, lr}
   b4578:	4604      	mov	r4, r0
	switch (__op)
   b457a:	d102      	bne.n	b4582 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b457c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b457e:	6023      	str	r3, [r4, #0]
	}
   b4580:	e003      	b.n	b458a <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4582:	2a02      	cmp	r2, #2
   b4584:	d003      	beq.n	b458e <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4586:	2a03      	cmp	r2, #3
   b4588:	d00d      	beq.n	b45a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b458a:	2000      	movs	r0, #0
   b458c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b458e:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4590:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4592:	f7ff ff6a 	bl	b446a <_Znwj>
   b4596:	4603      	mov	r3, r0
   b4598:	2800      	cmp	r0, #0
   b459a:	d0f0      	beq.n	b457e <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b459c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b45a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b45a4:	e7eb      	b.n	b457e <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b45a6:	6800      	ldr	r0, [r0, #0]
   b45a8:	2800      	cmp	r0, #0
   b45aa:	d0ee      	beq.n	b458a <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b45ac:	210c      	movs	r1, #12
   b45ae:	f7ff ff60 	bl	b4472 <_ZdlPvj>
   b45b2:	e7ea      	b.n	b458a <_ZNSt17_Function_handlerIFvvESt5_BindIFM13PotentiometerFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b45b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b45b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b45b6:	b538      	push	{r3, r4, r5, lr}
   b45b8:	4604      	mov	r4, r0
	switch (__op)
   b45ba:	d102      	bne.n	b45c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b45bc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b45be:	6023      	str	r3, [r4, #0]
	}
   b45c0:	e003      	b.n	b45ca <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b45c2:	2a02      	cmp	r2, #2
   b45c4:	d003      	beq.n	b45ce <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b45c6:	2a03      	cmp	r2, #3
   b45c8:	d00d      	beq.n	b45e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b45ca:	2000      	movs	r0, #0
   b45cc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b45ce:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b45d0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b45d2:	f7ff ff4a 	bl	b446a <_Znwj>
   b45d6:	4603      	mov	r3, r0
   b45d8:	2800      	cmp	r0, #0
   b45da:	d0f0      	beq.n	b45be <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b45dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b45e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b45e4:	e7eb      	b.n	b45be <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b45e6:	6800      	ldr	r0, [r0, #0]
   b45e8:	2800      	cmp	r0, #0
   b45ea:	d0ee      	beq.n	b45ca <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b45ec:	210c      	movs	r1, #12
   b45ee:	f7ff ff40 	bl	b4472 <_ZdlPvj>
   b45f2:	e7ea      	b.n	b45ca <_ZNSt17_Function_handlerIFvvESt5_BindIFM6ButtonFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b45f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b45f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b45f6:	b538      	push	{r3, r4, r5, lr}
   b45f8:	4604      	mov	r4, r0
	switch (__op)
   b45fa:	d102      	bne.n	b4602 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b45fc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b45fe:	6023      	str	r3, [r4, #0]
	}
   b4600:	e003      	b.n	b460a <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4602:	2a02      	cmp	r2, #2
   b4604:	d003      	beq.n	b460e <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4606:	2a03      	cmp	r2, #3
   b4608:	d00d      	beq.n	b4626 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b460a:	2000      	movs	r0, #0
   b460c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b460e:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4610:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4612:	f7ff ff2a 	bl	b446a <_Znwj>
   b4616:	4603      	mov	r3, r0
   b4618:	2800      	cmp	r0, #0
   b461a:	d0f0      	beq.n	b45fe <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b461c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4620:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4624:	e7eb      	b.n	b45fe <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4626:	6800      	ldr	r0, [r0, #0]
   b4628:	2800      	cmp	r0, #0
   b462a:	d0ee      	beq.n	b460a <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b462c:	210c      	movs	r1, #12
   b462e:	f7ff ff20 	bl	b4472 <_ZdlPvj>
   b4632:	e7ea      	b.n	b460a <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

000b4634 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4634:	b510      	push	{r4, lr}
      if (_M_manager)
   b4636:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4638:	4604      	mov	r4, r0
      if (_M_manager)
   b463a:	b113      	cbz	r3, b4642 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b463c:	2203      	movs	r2, #3
   b463e:	4601      	mov	r1, r0
   b4640:	4798      	blx	r3
    }
   b4642:	4620      	mov	r0, r4
   b4644:	bd10      	pop	{r4, pc}

000b4646 <_ZN8LEDGroup6allOffEv>:
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
    {
      lightsInGroup[i].initialize(pins[i]);
    }
  }
  void allOff()
   b4646:	2300      	movs	r3, #0
  {
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
    {
      lightsInGroup[i].val = false;
   b4648:	4619      	mov	r1, r3
   b464a:	6802      	ldr	r2, [r0, #0]
   b464c:	54d1      	strb	r1, [r2, r3]
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b464e:	3304      	adds	r3, #4
   b4650:	2b14      	cmp	r3, #20
   b4652:	d1fa      	bne.n	b464a <_ZN8LEDGroup6allOffEv+0x4>
    }
  }
   b4654:	4770      	bx	lr
	...

000b4658 <_Z6updatev>:
    }
  }
};

void update()
{
   b4658:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b465a:	4d09      	ldr	r5, [pc, #36]	; (b4680 <_Z6updatev+0x28>)
  for (uint i = 0; i < updates.size(); i++)
   b465c:	2400      	movs	r4, #0
   b465e:	e9d5 0300 	ldrd	r0, r3, [r5]
   b4662:	1a1b      	subs	r3, r3, r0
   b4664:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   b4668:	d209      	bcs.n	b467e <_Z6updatev+0x26>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b466a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b466e:	6883      	ldr	r3, [r0, #8]
   b4670:	b90b      	cbnz	r3, b4676 <_Z6updatev+0x1e>
	__throw_bad_function_call();
   b4672:	f001 f922 	bl	b58ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4676:	68c3      	ldr	r3, [r0, #12]
   b4678:	4798      	blx	r3
   b467a:	3401      	adds	r4, #1
   b467c:	e7ef      	b.n	b465e <_Z6updatev+0x6>
  {
    updates[i]();
  }
   b467e:	bd38      	pop	{r3, r4, r5, pc}
   b4680:	2003e6ac 	.word	0x2003e6ac

000b4684 <_Z11editProgrami>:
    editProgram((int)ledPotentiometerSelected);
  }
}

void editProgram(int index)
{
   b4684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LEDS.allOff();
  ledIndex = 0;
   b4688:	4c23      	ldr	r4, [pc, #140]	; (b4718 <_Z11editProgrami+0x94>)
  frameIndex = 0;
   b468a:	4d24      	ldr	r5, [pc, #144]	; (b471c <_Z11editProgrami+0x98>)
   b468c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b4734 <_Z11editProgrami+0xb0>
  while (frameIndex < 5)
  {
    update();
    if (ledIndex == 5)
    {
      notice.val = true;
   b4690:	4f23      	ldr	r7, [pc, #140]	; (b4720 <_Z11editProgrami+0x9c>)
{
   b4692:	4606      	mov	r6, r0
  LEDS.allOff();
   b4694:	4823      	ldr	r0, [pc, #140]	; (b4724 <_Z11editProgrami+0xa0>)
   b4696:	f7ff ffd6 	bl	b4646 <_ZN8LEDGroup6allOffEv>
  ledIndex = 0;
   b469a:	2300      	movs	r3, #0
   b469c:	6023      	str	r3, [r4, #0]
  frameIndex = 0;
   b469e:	602b      	str	r3, [r5, #0]
    update();
   b46a0:	f7ff ffda 	bl	b4658 <_Z6updatev>
    if (ledIndex == 5)
   b46a4:	6823      	ldr	r3, [r4, #0]
   b46a6:	2b05      	cmp	r3, #5
   b46a8:	d11b      	bne.n	b46e2 <_Z11editProgrami+0x5e>
      notice.val = true;
   b46aa:	2301      	movs	r3, #1
   b46ac:	703b      	strb	r3, [r7, #0]
      if (returnTrue.clicked || returnFalse.clicked)
   b46ae:	f898 3002 	ldrb.w	r3, [r8, #2]
   b46b2:	b913      	cbnz	r3, b46ba <_Z11editProgrami+0x36>
   b46b4:	4b1c      	ldr	r3, [pc, #112]	; (b4728 <_Z11editProgrami+0xa4>)
   b46b6:	789b      	ldrb	r3, [r3, #2]
   b46b8:	b15b      	cbz	r3, b46d2 <_Z11editProgrami+0x4e>
      {
        LEDS.allOff();
   b46ba:	481a      	ldr	r0, [pc, #104]	; (b4724 <_Z11editProgrami+0xa0>)
   b46bc:	f7ff ffc3 	bl	b4646 <_ZN8LEDGroup6allOffEv>
        ledIndex = 0;
   b46c0:	2300      	movs	r3, #0
   b46c2:	6023      	str	r3, [r4, #0]
        notice.val = false;
   b46c4:	703b      	strb	r3, [r7, #0]
        if (returnTrue.clicked)
   b46c6:	f898 3002 	ldrb.w	r3, [r8, #2]
   b46ca:	b113      	cbz	r3, b46d2 <_Z11editProgrami+0x4e>
        {
          frameIndex++;
   b46cc:	682b      	ldr	r3, [r5, #0]
   b46ce:	3301      	adds	r3, #1
   b46d0:	602b      	str	r3, [r5, #0]
  while (frameIndex < 5)
   b46d2:	682b      	ldr	r3, [r5, #0]
   b46d4:	2b04      	cmp	r3, #4
   b46d6:	dde3      	ble.n	b46a0 <_Z11editProgrami+0x1c>
        }
        ledIndex++;
      }
    }
  }
  isAnimationFileFull[index] = true;
   b46d8:	4b14      	ldr	r3, [pc, #80]	; (b472c <_Z11editProgrami+0xa8>)
   b46da:	2201      	movs	r2, #1
   b46dc:	559a      	strb	r2, [r3, r6]
}
   b46de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (returnTrue.clicked || returnFalse.clicked)
   b46e2:	f898 2002 	ldrb.w	r2, [r8, #2]
   b46e6:	b93a      	cbnz	r2, b46f8 <_Z11editProgrami+0x74>
   b46e8:	4b0f      	ldr	r3, [pc, #60]	; (b4728 <_Z11editProgrami+0xa4>)
   b46ea:	789b      	ldrb	r3, [r3, #2]
   b46ec:	2b00      	cmp	r3, #0
   b46ee:	d0f0      	beq.n	b46d2 <_Z11editProgrami+0x4e>
        ledIndex++;
   b46f0:	6823      	ldr	r3, [r4, #0]
   b46f2:	3301      	adds	r3, #1
   b46f4:	6023      	str	r3, [r4, #0]
   b46f6:	e7ec      	b.n	b46d2 <_Z11editProgrami+0x4e>
    lightsInGroup[index].val = true;
   b46f8:	4a0a      	ldr	r2, [pc, #40]	; (b4724 <_Z11editProgrami+0xa0>)
   b46fa:	6812      	ldr	r2, [r2, #0]
   b46fc:	2001      	movs	r0, #1
   b46fe:	f802 0023 	strb.w	r0, [r2, r3, lsl #2]
          animations[index][frameIndex][ledIndex] = true;
   b4702:	682b      	ldr	r3, [r5, #0]
   b4704:	6822      	ldr	r2, [r4, #0]
   b4706:	2119      	movs	r1, #25
   b4708:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b470c:	fb01 3306 	mla	r3, r1, r6, r3
   b4710:	4907      	ldr	r1, [pc, #28]	; (b4730 <_Z11editProgrami+0xac>)
   b4712:	440b      	add	r3, r1
   b4714:	5498      	strb	r0, [r3, r2]
   b4716:	e7eb      	b.n	b46f0 <_Z11editProgrami+0x6c>
   b4718:	2003e684 	.word	0x2003e684
   b471c:	2003e664 	.word	0x2003e664
   b4720:	2003e690 	.word	0x2003e690
   b4724:	2003e5d0 	.word	0x2003e5d0
   b4728:	2003e69c 	.word	0x2003e69c
   b472c:	2003e668 	.word	0x2003e668
   b4730:	2003e5e4 	.word	0x2003e5e4
   b4734:	2003e6a4 	.word	0x2003e6a4

000b4738 <_Z4playi>:

void play(int index)
{
   b4738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  notice.val = false;
   b473c:	4a13      	ldr	r2, [pc, #76]	; (b478c <_Z4playi+0x54>)
  returnTrue.bDown = false;
   b473e:	4e14      	ldr	r6, [pc, #80]	; (b4790 <_Z4playi+0x58>)
  while (!returnTrue.bDown)
  {
    for (bool *frame : animations[index])
    {
      update();
      LEDS.allOff();
   b4740:	4f14      	ldr	r7, [pc, #80]	; (b4794 <_Z4playi+0x5c>)
  notice.val = false;
   b4742:	2300      	movs	r3, #0
   b4744:	7013      	strb	r3, [r2, #0]
  returnTrue.bDown = false;
   b4746:	7033      	strb	r3, [r6, #0]
    for (bool *frame : animations[index])
   b4748:	4b13      	ldr	r3, [pc, #76]	; (b4798 <_Z4playi+0x60>)
   b474a:	2519      	movs	r5, #25
   b474c:	fb05 3500 	mla	r5, r5, r0, r3
   b4750:	f105 0819 	add.w	r8, r5, #25
   b4754:	462c      	mov	r4, r5
   b4756:	4544      	cmp	r4, r8
   b4758:	d012      	beq.n	b4780 <_Z4playi+0x48>
      update();
   b475a:	f7ff ff7d 	bl	b4658 <_Z6updatev>
      LEDS.allOff();
   b475e:	4638      	mov	r0, r7
   b4760:	f7ff ff71 	bl	b4646 <_ZN8LEDGroup6allOffEv>
      for (int ledIndex = 0; ledIndex < 5; ledIndex++)
   b4764:	1e62      	subs	r2, r4, #1
      LEDS.allOff();
   b4766:	2300      	movs	r3, #0
      {
        LEDS.lightsInGroup[ledIndex].val = frame[ledIndex];
   b4768:	6839      	ldr	r1, [r7, #0]
   b476a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b476e:	54c8      	strb	r0, [r1, r3]
      for (int ledIndex = 0; ledIndex < 5; ledIndex++)
   b4770:	3304      	adds	r3, #4
   b4772:	2b14      	cmp	r3, #20
   b4774:	d1f8      	bne.n	b4768 <_Z4playi+0x30>
      }
      delay(200);
   b4776:	20c8      	movs	r0, #200	; 0xc8
   b4778:	f000 fba0 	bl	b4ebc <delay>
    for (bool *frame : animations[index])
   b477c:	3405      	adds	r4, #5
   b477e:	e7ea      	b.n	b4756 <_Z4playi+0x1e>
  while (!returnTrue.bDown)
   b4780:	7833      	ldrb	r3, [r6, #0]
   b4782:	2b00      	cmp	r3, #0
   b4784:	d0e6      	beq.n	b4754 <_Z4playi+0x1c>
    }
  }
}
   b4786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b478a:	bf00      	nop
   b478c:	2003e690 	.word	0x2003e690
   b4790:	2003e6a4 	.word	0x2003e6a4
   b4794:	2003e5d0 	.word	0x2003e5d0
   b4798:	2003e5e4 	.word	0x2003e5e4

000b479c <_Z6removei>:

void remove(int index)
{
  isAnimationFileFull[index] = false;
   b479c:	4b04      	ldr	r3, [pc, #16]	; (b47b0 <_Z6removei+0x14>)
   b479e:	2100      	movs	r1, #0
   b47a0:	5419      	strb	r1, [r3, r0]
  for (bool *frame : animations[index])
  {
    for (int light = 0; light < 5; light++)
    {
      frame[light] = false;
   b47a2:	4b04      	ldr	r3, [pc, #16]	; (b47b4 <_Z6removei+0x18>)
   b47a4:	2219      	movs	r2, #25
   b47a6:	fb02 3000 	mla	r0, r2, r0, r3
   b47aa:	f001 b89d 	b.w	b58e8 <memset>
   b47ae:	bf00      	nop
   b47b0:	2003e668 	.word	0x2003e668
   b47b4:	2003e5e4 	.word	0x2003e5e4

000b47b8 <loop>:
{
   b47b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  update();
   b47ba:	f7ff ff4d 	bl	b4658 <_Z6updatev>
  ledPotentiometerSelected = map(potentiometerSelecter.val, 0, 4095, 0, 5);
   b47be:	2305      	movs	r3, #5
   b47c0:	481f      	ldr	r0, [pc, #124]	; (b4840 <loop+0x88>)
   b47c2:	9300      	str	r3, [sp, #0]
   b47c4:	2300      	movs	r3, #0
   b47c6:	f640 72ff 	movw	r2, #4095	; 0xfff
   b47ca:	4619      	mov	r1, r3
   b47cc:	6840      	ldr	r0, [r0, #4]
   b47ce:	4c1d      	ldr	r4, [pc, #116]	; (b4844 <loop+0x8c>)
  LEDS.allOff();
   b47d0:	4d1d      	ldr	r5, [pc, #116]	; (b4848 <loop+0x90>)
  ledPotentiometerSelected = map(potentiometerSelecter.val, 0, 4095, 0, 5);
   b47d2:	f000 fb67 	bl	b4ea4 <_Z3mapiiiii>
   b47d6:	f7ff fd73 	bl	b42c0 <__aeabi_i2d>
   b47da:	e9c4 0100 	strd	r0, r1, [r4]
  LEDS.allOff();
   b47de:	4628      	mov	r0, r5
   b47e0:	f7ff ff31 	bl	b4646 <_ZN8LEDGroup6allOffEv>
  LEDS.oneOn(ledPotentiometerSelected);
   b47e4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b47e8:	f7ff fdd4 	bl	b4394 <__aeabi_d2iz>
   b47ec:	682b      	ldr	r3, [r5, #0]
   b47ee:	4d17      	ldr	r5, [pc, #92]	; (b484c <loop+0x94>)
   b47f0:	2201      	movs	r2, #1
   b47f2:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
  isFileFull = isAnimationFileFull[(int)ledPotentiometerSelected];
   b47f6:	e9d4 0100 	ldrd	r0, r1, [r4]
   b47fa:	f7ff fdcb 	bl	b4394 <__aeabi_d2iz>
   b47fe:	4b14      	ldr	r3, [pc, #80]	; (b4850 <loop+0x98>)
   b4800:	4a14      	ldr	r2, [pc, #80]	; (b4854 <loop+0x9c>)
   b4802:	5c1b      	ldrb	r3, [r3, r0]
   b4804:	7013      	strb	r3, [r2, #0]
  notice.val = isFileFull;
   b4806:	4a14      	ldr	r2, [pc, #80]	; (b4858 <loop+0xa0>)
   b4808:	7013      	strb	r3, [r2, #0]
  if (isFileFull)
   b480a:	b17b      	cbz	r3, b482c <loop+0x74>
    if (returnFalse.clicked)
   b480c:	4b13      	ldr	r3, [pc, #76]	; (b485c <loop+0xa4>)
   b480e:	789b      	ldrb	r3, [r3, #2]
   b4810:	b10b      	cbz	r3, b4816 <loop+0x5e>
      remove((int)ledPotentiometerSelected);
   b4812:	f7ff ffc3 	bl	b479c <_Z6removei>
    if (returnTrue.clicked)
   b4816:	78ab      	ldrb	r3, [r5, #2]
   b4818:	b17b      	cbz	r3, b483a <loop+0x82>
      play((int)ledPotentiometerSelected);
   b481a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b481e:	f7ff fdb9 	bl	b4394 <__aeabi_d2iz>
}
   b4822:	b003      	add	sp, #12
   b4824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      play((int)ledPotentiometerSelected);
   b4828:	f7ff bf86 	b.w	b4738 <_Z4playi>
  else if (returnTrue.clicked)
   b482c:	78ab      	ldrb	r3, [r5, #2]
   b482e:	b123      	cbz	r3, b483a <loop+0x82>
}
   b4830:	b003      	add	sp, #12
   b4832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    editProgram((int)ledPotentiometerSelected);
   b4836:	f7ff bf25 	b.w	b4684 <_Z11editProgrami>
}
   b483a:	b003      	add	sp, #12
   b483c:	bd30      	pop	{r4, r5, pc}
   b483e:	bf00      	nop
   b4840:	2003e694 	.word	0x2003e694
   b4844:	2003e688 	.word	0x2003e688
   b4848:	2003e5d0 	.word	0x2003e5d0
   b484c:	2003e6a4 	.word	0x2003e6a4
   b4850:	2003e668 	.word	0x2003e668
   b4854:	2003e66d 	.word	0x2003e66d
   b4858:	2003e690 	.word	0x2003e690
   b485c:	2003e69c 	.word	0x2003e69c

000b4860 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4864:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b4868:	4607      	mov	r7, r0

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b486a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b486e:	ebab 0008 	sub.w	r0, fp, r8
	if (max_size() - size() < __n)
   b4872:	ebb3 1f20 	cmp.w	r3, r0, asr #4
   b4876:	468a      	mov	sl, r1
   b4878:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b487a:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (max_size() - size() < __n)
   b487e:	d102      	bne.n	b4886 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4880:	4824      	ldr	r0, [pc, #144]	; (b4914 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xb4>)
   b4882:	f001 f817 	bl	b58b4 <_ZSt20__throw_length_errorPKc>
   b4886:	2a01      	cmp	r2, #1
   b4888:	4614      	mov	r4, r2
   b488a:	bf38      	it	cc
   b488c:	2401      	movcc	r4, #1
   b488e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4890:	ebaa 0508 	sub.w	r5, sl, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4894:	d21b      	bcs.n	b48ce <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4896:	b1e4      	cbz	r4, b48d2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
   b4898:	429c      	cmp	r4, r3
   b489a:	bf28      	it	cs
   b489c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b489e:	0120      	lsls	r0, r4, #4
   b48a0:	9101      	str	r1, [sp, #4]
   b48a2:	f7ff fde2 	bl	b446a <_Znwj>
   b48a6:	9901      	ldr	r1, [sp, #4]
   b48a8:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b48aa:	1970      	adds	r0, r6, r5
   b48ac:	f7ff fe45 	bl	b453a <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48b0:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b48b2:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b48b4:	45aa      	cmp	sl, r5
   b48b6:	f100 0910 	add.w	r9, r0, #16
   b48ba:	d00c      	beq.n	b48d6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
   b48bc:	4629      	mov	r1, r5
   b48be:	f7ff fe3c 	bl	b453a <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
    class function<_Res(_ArgTypes...)>
   b48c2:	4628      	mov	r0, r5
   b48c4:	f7ff feb6 	bl	b4634 <_ZNSt14_Function_baseD1Ev>
   b48c8:	3510      	adds	r5, #16
   b48ca:	4648      	mov	r0, r9
   b48cc:	e7f2      	b.n	b48b4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b48ce:	461c      	mov	r4, r3
   b48d0:	e7e5      	b.n	b489e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b48d2:	4626      	mov	r6, r4
   b48d4:	e7e9      	b.n	b48aa <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b48d6:	455d      	cmp	r5, fp
   b48d8:	d00a      	beq.n	b48f0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>
   b48da:	4629      	mov	r1, r5
   b48dc:	4648      	mov	r0, r9
   b48de:	f7ff fe2c 	bl	b453a <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
   b48e2:	4628      	mov	r0, r5
   b48e4:	f7ff fea6 	bl	b4634 <_ZNSt14_Function_baseD1Ev>
   b48e8:	3510      	adds	r5, #16
   b48ea:	f109 0910 	add.w	r9, r9, #16
   b48ee:	e7f2      	b.n	b48d6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
	if (__p)
   b48f0:	f1b8 0f00 	cmp.w	r8, #0
   b48f4:	d005      	beq.n	b4902 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b48f6:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b48f8:	4640      	mov	r0, r8
   b48fa:	eba1 0108 	sub.w	r1, r1, r8
   b48fe:	f7ff fdb8 	bl	b4472 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4902:	eb06 1404 	add.w	r4, r6, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b4906:	e9c7 6900 	strd	r6, r9, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b490a:	60bc      	str	r4, [r7, #8]
    }
   b490c:	b003      	add	sp, #12
   b490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4912:	bf00      	nop
   b4914:	000b5a34 	.word	0x000b5a34

000b4918 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   b4918:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b491a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   b491e:	42ab      	cmp	r3, r5
      vector<_Tp, _Alloc>::
   b4920:	4604      	mov	r4, r0
   b4922:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4924:	d006      	beq.n	b4934 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0+0x1c>
   b4926:	4618      	mov	r0, r3
   b4928:	f7ff fe07 	bl	b453a <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b492c:	6863      	ldr	r3, [r4, #4]
   b492e:	3310      	adds	r3, #16
   b4930:	6063      	str	r3, [r4, #4]
      }
   b4932:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b4934:	4619      	mov	r1, r3
   b4936:	f7ff ff93 	bl	b4860 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
   b493a:	e7fa      	b.n	b4932 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0+0x1a>

000b493c <_ZN6Button10initializeEt>:
  void initialize(pin_t PIN)
   b493c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b493e:	4605      	mov	r5, r0
    _Function_base() : _M_manager(nullptr) { }
   b4940:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4942:	200c      	movs	r0, #12
   b4944:	460c      	mov	r4, r1
    _Function_base() : _M_manager(nullptr) { }
   b4946:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4948:	f7ff fd8f 	bl	b446a <_Znwj>
   b494c:	b118      	cbz	r0, b4956 <_ZN6Button10initializeEt+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b494e:	4b0c      	ldr	r3, [pc, #48]	; (b4980 <_ZN6Button10initializeEt+0x44>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4950:	6085      	str	r5, [r0, #8]
   b4952:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b4956:	4b0b      	ldr	r3, [pc, #44]	; (b4984 <_ZN6Button10initializeEt+0x48>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4958:	9000      	str	r0, [sp, #0]
      { emplace_back(std::move(__x)); }
   b495a:	4669      	mov	r1, sp
	    _M_invoker = &_My_handler::_M_invoke;
   b495c:	9303      	str	r3, [sp, #12]
   b495e:	480a      	ldr	r0, [pc, #40]	; (b4988 <_ZN6Button10initializeEt+0x4c>)
	    _M_manager = &_My_handler::_M_manager;
   b4960:	4b0a      	ldr	r3, [pc, #40]	; (b498c <_ZN6Button10initializeEt+0x50>)
   b4962:	9302      	str	r3, [sp, #8]
   b4964:	f7ff ffd8 	bl	b4918 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4968:	4668      	mov	r0, sp
   b496a:	f7ff fe63 	bl	b4634 <_ZNSt14_Function_baseD1Ev>
    pinMode(pin, INPUT);
   b496e:	2100      	movs	r1, #0
   b4970:	4620      	mov	r0, r4
    pin = PIN;
   b4972:	80ac      	strh	r4, [r5, #4]
  }
   b4974:	b004      	add	sp, #16
   b4976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pinMode(pin, INPUT);
   b497a:	f000 bec5 	b.w	b5708 <pinMode>
   b497e:	bf00      	nop
   b4980:	000b448f 	.word	0x000b448f
   b4984:	000b44fb 	.word	0x000b44fb
   b4988:	2003e6ac 	.word	0x2003e6ac
   b498c:	000b45b5 	.word	0x000b45b5

000b4990 <_ZN3LED10initializeEt>:
  void initialize(pin_t PIN)
   b4990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4992:	4605      	mov	r5, r0
    _Function_base() : _M_manager(nullptr) { }
   b4994:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4996:	200c      	movs	r0, #12
   b4998:	460c      	mov	r4, r1
    _Function_base() : _M_manager(nullptr) { }
   b499a:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b499c:	f7ff fd65 	bl	b446a <_Znwj>
   b49a0:	b118      	cbz	r0, b49aa <_ZN3LED10initializeEt+0x1a>
   b49a2:	4b0c      	ldr	r3, [pc, #48]	; (b49d4 <_ZN3LED10initializeEt+0x44>)
   b49a4:	6085      	str	r5, [r0, #8]
   b49a6:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b49aa:	4b0b      	ldr	r3, [pc, #44]	; (b49d8 <_ZN3LED10initializeEt+0x48>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b49ac:	9000      	str	r0, [sp, #0]
   b49ae:	4669      	mov	r1, sp
	    _M_invoker = &_My_handler::_M_invoke;
   b49b0:	9303      	str	r3, [sp, #12]
   b49b2:	480a      	ldr	r0, [pc, #40]	; (b49dc <_ZN3LED10initializeEt+0x4c>)
	    _M_manager = &_My_handler::_M_manager;
   b49b4:	4b0a      	ldr	r3, [pc, #40]	; (b49e0 <_ZN3LED10initializeEt+0x50>)
   b49b6:	9302      	str	r3, [sp, #8]
   b49b8:	f7ff ffae 	bl	b4918 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0>
    class function<_Res(_ArgTypes...)>
   b49bc:	4668      	mov	r0, sp
   b49be:	f7ff fe39 	bl	b4634 <_ZNSt14_Function_baseD1Ev>
    pinMode(pin, OUTPUT);
   b49c2:	2101      	movs	r1, #1
   b49c4:	4620      	mov	r0, r4
    pin = PIN;
   b49c6:	806c      	strh	r4, [r5, #2]
  }
   b49c8:	b004      	add	sp, #16
   b49ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pinMode(pin, OUTPUT);
   b49ce:	f000 be9b 	b.w	b5708 <pinMode>
   b49d2:	bf00      	nop
   b49d4:	000b4487 	.word	0x000b4487
   b49d8:	000b451b 	.word	0x000b451b
   b49dc:	2003e6ac 	.word	0x2003e6ac
   b49e0:	000b45f5 	.word	0x000b45f5

000b49e4 <setup>:
{
   b49e4:	b530      	push	{r4, r5, lr}
  notice.initialize(noticeLight);
   b49e6:	481c      	ldr	r0, [pc, #112]	; (b4a58 <setup+0x74>)
    pins = PINS;
   b49e8:	4d1c      	ldr	r5, [pc, #112]	; (b4a5c <setup+0x78>)
{
   b49ea:	b085      	sub	sp, #20
  notice.initialize(noticeLight);
   b49ec:	210b      	movs	r1, #11
   b49ee:	f7ff ffcf 	bl	b4990 <_ZN3LED10initializeEt>
   b49f2:	4b1b      	ldr	r3, [pc, #108]	; (b4a60 <setup+0x7c>)
   b49f4:	606b      	str	r3, [r5, #4]
   b49f6:	2400      	movs	r4, #0
      lightsInGroup[i].initialize(pins[i]);
   b49f8:	e9d5 0300 	ldrd	r0, r3, [r5]
   b49fc:	5b19      	ldrh	r1, [r3, r4]
   b49fe:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b4a02:	3402      	adds	r4, #2
      lightsInGroup[i].initialize(pins[i]);
   b4a04:	f7ff ffc4 	bl	b4990 <_ZN3LED10initializeEt>
    for (uint i = 0; i < sizeof(lightsInGroup) + 1; i++)
   b4a08:	2c0a      	cmp	r4, #10
   b4a0a:	d1f5      	bne.n	b49f8 <setup+0x14>
  returnTrue.initialize(returnTrueButton);
   b4a0c:	4621      	mov	r1, r4
   b4a0e:	4815      	ldr	r0, [pc, #84]	; (b4a64 <setup+0x80>)
    pin = PIN;
   b4a10:	4c15      	ldr	r4, [pc, #84]	; (b4a68 <setup+0x84>)
   b4a12:	f7ff ff93 	bl	b493c <_ZN6Button10initializeEt>
  returnFalse.initialize(returnFalseButton);
   b4a16:	4815      	ldr	r0, [pc, #84]	; (b4a6c <setup+0x88>)
   b4a18:	2109      	movs	r1, #9
   b4a1a:	f7ff ff8f 	bl	b493c <_ZN6Button10initializeEt>
   b4a1e:	200f      	movs	r0, #15
    pinMode(pin, INPUT);
   b4a20:	2100      	movs	r1, #0
    pin = PIN;
   b4a22:	8020      	strh	r0, [r4, #0]
    _Function_base() : _M_manager(nullptr) { }
   b4a24:	2500      	movs	r5, #0
    pinMode(pin, INPUT);
   b4a26:	f000 fe6f 	bl	b5708 <pinMode>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a2a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b4a2c:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a2e:	f7ff fd1c 	bl	b446a <_Znwj>
   b4a32:	b118      	cbz	r0, b4a3c <setup+0x58>
   b4a34:	4b0e      	ldr	r3, [pc, #56]	; (b4a70 <setup+0x8c>)
   b4a36:	6084      	str	r4, [r0, #8]
   b4a38:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b4a3c:	4b0d      	ldr	r3, [pc, #52]	; (b4a74 <setup+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4a3e:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b4a40:	9303      	str	r3, [sp, #12]
   b4a42:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   b4a44:	4b0c      	ldr	r3, [pc, #48]	; (b4a78 <setup+0x94>)
   b4a46:	480d      	ldr	r0, [pc, #52]	; (b4a7c <setup+0x98>)
   b4a48:	9302      	str	r3, [sp, #8]
   b4a4a:	f7ff ff65 	bl	b4918 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4a4e:	4668      	mov	r0, sp
   b4a50:	f7ff fdf0 	bl	b4634 <_ZNSt14_Function_baseD1Ev>
}
   b4a54:	b005      	add	sp, #20
   b4a56:	bd30      	pop	{r4, r5, pc}
   b4a58:	2003e690 	.word	0x2003e690
   b4a5c:	2003e5d0 	.word	0x2003e5d0
   b4a60:	2003e558 	.word	0x2003e558
   b4a64:	2003e6a4 	.word	0x2003e6a4
   b4a68:	2003e694 	.word	0x2003e694
   b4a6c:	2003e69c 	.word	0x2003e69c
   b4a70:	000b44cd 	.word	0x000b44cd
   b4a74:	000b44db 	.word	0x000b44db
   b4a78:	000b4575 	.word	0x000b4575
   b4a7c:	2003e6ac 	.word	0x2003e6ac

000b4a80 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a80:	4b15      	ldr	r3, [pc, #84]	; (b4ad8 <_GLOBAL__sub_I_SystemMode+0x58>)
    SleepResult() {}
   b4a82:	4a16      	ldr	r2, [pc, #88]	; (b4adc <_GLOBAL__sub_I_SystemMode+0x5c>)
    }
  }
   b4a84:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4a86:	2400      	movs	r4, #0
   b4a88:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4a8c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a8e:	2003      	movs	r0, #3
   b4a90:	f000 f94c 	bl	b4d2c <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4a94:	4621      	mov	r1, r4
   b4a96:	2001      	movs	r0, #1
   b4a98:	f000 f958 	bl	b4d4c <system_thread_set_state>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4a9c:	4b10      	ldr	r3, [pc, #64]	; (b4ae0 <_GLOBAL__sub_I_SystemMode+0x60>)
  {
   b4a9e:	4a11      	ldr	r2, [pc, #68]	; (b4ae4 <_GLOBAL__sub_I_SystemMode+0x64>)
   b4aa0:	609c      	str	r4, [r3, #8]
   b4aa2:	e9c3 4400 	strd	r4, r4, [r3]
class LED
   b4aa6:	4b10      	ldr	r3, [pc, #64]	; (b4ae8 <_GLOBAL__sub_I_SystemMode+0x68>)
   b4aa8:	701c      	strb	r4, [r3, #0]
    lightsInGroup = array;
   b4aaa:	e9c2 3400 	strd	r3, r4, [r2]
class LED
   b4aae:	711c      	strb	r4, [r3, #4]
   b4ab0:	721c      	strb	r4, [r3, #8]
   b4ab2:	731c      	strb	r4, [r3, #12]
   b4ab4:	741c      	strb	r4, [r3, #16]
   b4ab6:	4b0d      	ldr	r3, [pc, #52]	; (b4aec <_GLOBAL__sub_I_SystemMode+0x6c>)
   b4ab8:	701c      	strb	r4, [r3, #0]
class Button
   b4aba:	4b0d      	ldr	r3, [pc, #52]	; (b4af0 <_GLOBAL__sub_I_SystemMode+0x70>)
   b4abc:	2201      	movs	r2, #1
   b4abe:	801c      	strh	r4, [r3, #0]
   b4ac0:	709c      	strb	r4, [r3, #2]
   b4ac2:	719a      	strb	r2, [r3, #6]
   b4ac4:	4b0b      	ldr	r3, [pc, #44]	; (b4af4 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4ac6:	801c      	strh	r4, [r3, #0]
   b4ac8:	709c      	strb	r4, [r3, #2]
class Potentiometer
   b4aca:	4c0b      	ldr	r4, [pc, #44]	; (b4af8 <_GLOBAL__sub_I_SystemMode+0x78>)
class Button
   b4acc:	719a      	strb	r2, [r3, #6]
class Potentiometer
   b4ace:	8820      	ldrh	r0, [r4, #0]
   b4ad0:	f000 fe57 	bl	b5782 <analogRead>
   b4ad4:	6060      	str	r0, [r4, #4]
   b4ad6:	bd10      	pop	{r4, pc}
   b4ad8:	2003e5d8 	.word	0x2003e5d8
   b4adc:	ffff0000 	.word	0xffff0000
   b4ae0:	2003e6ac 	.word	0x2003e6ac
   b4ae4:	2003e5d0 	.word	0x2003e5d0
   b4ae8:	2003e66e 	.word	0x2003e66e
   b4aec:	2003e690 	.word	0x2003e690
   b4af0:	2003e6a4 	.word	0x2003e6a4
   b4af4:	2003e69c 	.word	0x2003e69c
   b4af8:	2003e694 	.word	0x2003e694

000b4afc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <os_mutex_recursive_create+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	00030248 	.word	0x00030248

000b4b0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <HAL_RNG_GetRandomNumber+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	685b      	ldr	r3, [r3, #4]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	00030218 	.word	0x00030218

000b4b1c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	695b      	ldr	r3, [r3, #20]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030218 	.word	0x00030218

000b4b2c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <hal_pin_validate_function+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	685b      	ldr	r3, [r3, #4]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	0003022c 	.word	0x0003022c

000b4b3c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <hal_gpio_mode+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	689b      	ldr	r3, [r3, #8]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	0003022c 	.word	0x0003022c

000b4b4c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <hal_gpio_get_mode+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	68db      	ldr	r3, [r3, #12]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	0003022c 	.word	0x0003022c

000b4b5c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <hal_gpio_write+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	691b      	ldr	r3, [r3, #16]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	0003022c 	.word	0x0003022c

000b4b6c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <hal_gpio_read+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	695b      	ldr	r3, [r3, #20]
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	0003022c 	.word	0x0003022c

000b4b7c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <hal_adc_read+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	0003022c 	.word	0x0003022c

000b4b8c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <hal_i2c_write+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	6a1b      	ldr	r3, [r3, #32]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030228 	.word	0x00030228

000b4b9c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <hal_i2c_available+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030228 	.word	0x00030228

000b4bac <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <hal_i2c_read+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030228 	.word	0x00030228

000b4bbc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <hal_i2c_peek+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030228 	.word	0x00030228

000b4bcc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <hal_i2c_flush+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030228 	.word	0x00030228

000b4bdc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <hal_i2c_is_enabled+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030228 	.word	0x00030228

000b4bec <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <hal_i2c_init+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030228 	.word	0x00030228

000b4bfc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <inet_inet_ntop+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	695b      	ldr	r3, [r3, #20]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030264 	.word	0x00030264

000b4c0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <netdb_freeaddrinfo+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	689b      	ldr	r3, [r3, #8]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030268 	.word	0x00030268

000b4c1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <netdb_getaddrinfo+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	68db      	ldr	r3, [r3, #12]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030268 	.word	0x00030268

000b4c2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <hal_spi_init+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	69db      	ldr	r3, [r3, #28]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030230 	.word	0x00030230

000b4c3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <hal_spi_is_enabled+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6a1b      	ldr	r3, [r3, #32]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030230 	.word	0x00030230

000b4c4c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <hal_usart_write+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	68db      	ldr	r3, [r3, #12]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003023c 	.word	0x0003023c

000b4c5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <hal_usart_available+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	691b      	ldr	r3, [r3, #16]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003023c 	.word	0x0003023c

000b4c6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <hal_usart_read+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	695b      	ldr	r3, [r3, #20]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	0003023c 	.word	0x0003023c

000b4c7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <hal_usart_peek+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	699b      	ldr	r3, [r3, #24]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	0003023c 	.word	0x0003023c

000b4c8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <hal_usart_flush+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	69db      	ldr	r3, [r3, #28]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	0003023c 	.word	0x0003023c

000b4c9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <hal_usart_is_enabled+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6a1b      	ldr	r3, [r3, #32]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	0003023c 	.word	0x0003023c

000b4cac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <hal_usart_available_data_for_write+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	0003023c 	.word	0x0003023c

000b4cbc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <hal_usart_init_ex+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	0003023c 	.word	0x0003023c

000b4ccc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <HAL_USB_USART_Init+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	681b      	ldr	r3, [r3, #0]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	0003024c 	.word	0x0003024c

000b4cdc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <HAL_USB_USART_Available_Data+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	691b      	ldr	r3, [r3, #16]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	0003024c 	.word	0x0003024c

000b4cec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	0003024c 	.word	0x0003024c

000b4cfc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <HAL_USB_USART_Receive_Data+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	699b      	ldr	r3, [r3, #24]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	0003024c 	.word	0x0003024c

000b4d0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <HAL_USB_USART_Send_Data+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	69db      	ldr	r3, [r3, #28]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003024c 	.word	0x0003024c

000b4d1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <HAL_USB_USART_Flush_Data+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6a1b      	ldr	r3, [r3, #32]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003024c 	.word	0x0003024c

000b4d2c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <set_system_mode+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	685b      	ldr	r3, [r3, #4]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030220 	.word	0x00030220

000b4d3c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <system_delay_ms+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	695b      	ldr	r3, [r3, #20]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030220 	.word	0x00030220

000b4d4c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <system_thread_set_state+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030220 	.word	0x00030220

000b4d5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b03      	ldr	r3, [pc, #12]	; (b4d6c <system_ctrl_set_app_request_handler+0x10>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d66:	9301      	str	r3, [sp, #4]
   b4d68:	bd08      	pop	{r3, pc}
   b4d6a:	0000      	.short	0x0000
   b4d6c:	00030220 	.word	0x00030220

000b4d70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b03      	ldr	r3, [pc, #12]	; (b4d80 <system_ctrl_set_result+0x10>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d7a:	9301      	str	r3, [sp, #4]
   b4d7c:	bd08      	pop	{r3, pc}
   b4d7e:	0000      	.short	0x0000
   b4d80:	00030220 	.word	0x00030220

000b4d84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030244 	.word	0x00030244

000b4d94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <network_connect+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	685b      	ldr	r3, [r3, #4]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030240 	.word	0x00030240

000b4da4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <network_connecting+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	689b      	ldr	r3, [r3, #8]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030240 	.word	0x00030240

000b4db4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <network_disconnect+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	68db      	ldr	r3, [r3, #12]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030240 	.word	0x00030240

000b4dc4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <network_ready+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	691b      	ldr	r3, [r3, #16]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030240 	.word	0x00030240

000b4dd4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <network_on+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	695b      	ldr	r3, [r3, #20]
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030240 	.word	0x00030240

000b4de4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <network_off+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	699b      	ldr	r3, [r3, #24]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030240 	.word	0x00030240

000b4df4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <network_listen+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	69db      	ldr	r3, [r3, #28]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030240 	.word	0x00030240

000b4e04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <network_listening+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6a1b      	ldr	r3, [r3, #32]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030240 	.word	0x00030240

000b4e14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <network_set_listen_timeout+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030240 	.word	0x00030240

000b4e24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <network_get_listen_timeout+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030240 	.word	0x00030240

000b4e34 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <network_is_on+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030240 	.word	0x00030240

000b4e44 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <network_is_off+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030240 	.word	0x00030240

000b4e54 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <malloc+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	681b      	ldr	r3, [r3, #0]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003021c 	.word	0x0003021c

000b4e64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <free+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	685b      	ldr	r3, [r3, #4]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003021c 	.word	0x0003021c

000b4e74 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <abort+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003021c 	.word	0x0003021c

000b4e84 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <__assert_func+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003021c 	.word	0x0003021c

000b4e94 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <newlib_impure_ptr_callback+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003021c 	.word	0x0003021c

000b4ea4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b4ea4:	428a      	cmp	r2, r1
{
   b4ea6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b4ea8:	d007      	beq.n	b4eba <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4eaa:	1a44      	subs	r4, r0, r1
   b4eac:	9802      	ldr	r0, [sp, #8]
   b4eae:	1ac0      	subs	r0, r0, r3
   b4eb0:	4344      	muls	r4, r0
   b4eb2:	1a50      	subs	r0, r2, r1
   b4eb4:	fb94 f0f0 	sdiv	r0, r4, r0
   b4eb8:	4418      	add	r0, r3
}
   b4eba:	bd10      	pop	{r4, pc}

000b4ebc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ebc:	2100      	movs	r1, #0
   b4ebe:	f7ff bf3d 	b.w	b4d3c <system_delay_ms>
	...

000b4ec4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ec4:	4802      	ldr	r0, [pc, #8]	; (b4ed0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ec6:	2300      	movs	r3, #0
   b4ec8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4eca:	f7ff be17 	b.w	b4afc <os_mutex_recursive_create>
   b4ece:	bf00      	nop
   b4ed0:	2003e6b8 	.word	0x2003e6b8

000b4ed4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ed4:	2200      	movs	r2, #0
   b4ed6:	6840      	ldr	r0, [r0, #4]
   b4ed8:	4611      	mov	r1, r2
   b4eda:	f7ff bf93 	b.w	b4e04 <network_listening>

000b4ede <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ede:	2200      	movs	r2, #0
   b4ee0:	6840      	ldr	r0, [r0, #4]
   b4ee2:	4611      	mov	r1, r2
   b4ee4:	f7ff bf9e 	b.w	b4e24 <network_get_listen_timeout>

000b4ee8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ee8:	6840      	ldr	r0, [r0, #4]
   b4eea:	2200      	movs	r2, #0
   b4eec:	f7ff bf92 	b.w	b4e14 <network_set_listen_timeout>

000b4ef0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ef0:	6840      	ldr	r0, [r0, #4]
   b4ef2:	2200      	movs	r2, #0
   b4ef4:	f081 0101 	eor.w	r1, r1, #1
   b4ef8:	f7ff bf7c 	b.w	b4df4 <network_listen>

000b4efc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4efc:	2300      	movs	r3, #0
   b4efe:	6840      	ldr	r0, [r0, #4]
   b4f00:	461a      	mov	r2, r3
   b4f02:	4619      	mov	r1, r3
   b4f04:	f7ff bf6e 	b.w	b4de4 <network_off>

000b4f08 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4f08:	2300      	movs	r3, #0
   b4f0a:	6840      	ldr	r0, [r0, #4]
   b4f0c:	461a      	mov	r2, r3
   b4f0e:	4619      	mov	r1, r3
   b4f10:	f7ff bf60 	b.w	b4dd4 <network_on>

000b4f14 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4f14:	2200      	movs	r2, #0
   b4f16:	6840      	ldr	r0, [r0, #4]
   b4f18:	4611      	mov	r1, r2
   b4f1a:	f7ff bf53 	b.w	b4dc4 <network_ready>

000b4f1e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4f1e:	2200      	movs	r2, #0
   b4f20:	6840      	ldr	r0, [r0, #4]
   b4f22:	4611      	mov	r1, r2
   b4f24:	f7ff bf3e 	b.w	b4da4 <network_connecting>

000b4f28 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4f28:	6840      	ldr	r0, [r0, #4]
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	2102      	movs	r1, #2
   b4f2e:	f7ff bf41 	b.w	b4db4 <network_disconnect>

000b4f32 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4f32:	2300      	movs	r3, #0
   b4f34:	6840      	ldr	r0, [r0, #4]
   b4f36:	461a      	mov	r2, r3
   b4f38:	f7ff bf2c 	b.w	b4d94 <network_connect>

000b4f3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4f3c:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4f3e:	2203      	movs	r2, #3
   b4f40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4f42:	4a02      	ldr	r2, [pc, #8]	; (b4f4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4f44:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4f46:	4770      	bx	lr
   b4f48:	2003e6bc 	.word	0x2003e6bc
   b4f4c:	000b5a58 	.word	0x000b5a58

000b4f50 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4f50:	4770      	bx	lr

000b4f52 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f54:	4606      	mov	r6, r0
   b4f56:	4615      	mov	r5, r2
   b4f58:	460c      	mov	r4, r1
   b4f5a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4f5c:	42bc      	cmp	r4, r7
   b4f5e:	d006      	beq.n	b4f6e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4f60:	6833      	ldr	r3, [r6, #0]
   b4f62:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4f66:	689b      	ldr	r3, [r3, #8]
   b4f68:	4630      	mov	r0, r6
   b4f6a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4f6c:	e7f6      	b.n	b4f5c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4f6e:	4628      	mov	r0, r5
   b4f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f72 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4f72:	7c00      	ldrb	r0, [r0, #16]
   b4f74:	2200      	movs	r2, #0
   b4f76:	f7ff be09 	b.w	b4b8c <hal_i2c_write>

000b4f7a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4f7a:	7c00      	ldrb	r0, [r0, #16]
   b4f7c:	2100      	movs	r1, #0
   b4f7e:	f7ff be0d 	b.w	b4b9c <hal_i2c_available>

000b4f82 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4f82:	7c00      	ldrb	r0, [r0, #16]
   b4f84:	2100      	movs	r1, #0
   b4f86:	f7ff be11 	b.w	b4bac <hal_i2c_read>

000b4f8a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4f8a:	7c00      	ldrb	r0, [r0, #16]
   b4f8c:	2100      	movs	r1, #0
   b4f8e:	f7ff be15 	b.w	b4bbc <hal_i2c_peek>

000b4f92 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4f92:	7c00      	ldrb	r0, [r0, #16]
   b4f94:	2100      	movs	r1, #0
   b4f96:	f7ff be19 	b.w	b4bcc <hal_i2c_flush>

000b4f9a <_ZN7TwoWireD0Ev>:
   b4f9a:	b510      	push	{r4, lr}
   b4f9c:	2114      	movs	r1, #20
   b4f9e:	4604      	mov	r4, r0
   b4fa0:	f7ff fa67 	bl	b4472 <_ZdlPvj>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4fa8:	b538      	push	{r3, r4, r5, lr}
   b4faa:	4604      	mov	r4, r0
   b4fac:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fb2:	2200      	movs	r2, #0
   b4fb4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4fb8:	4b09      	ldr	r3, [pc, #36]	; (b4fe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4fba:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4fbc:	4608      	mov	r0, r1
   b4fbe:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4fc0:	4629      	mov	r1, r5
   b4fc2:	f7ff fe13 	bl	b4bec <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4fc6:	30bf      	adds	r0, #191	; 0xbf
   b4fc8:	d108      	bne.n	b4fdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4fca:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4fcc:	07db      	lsls	r3, r3, #31
   b4fce:	d505      	bpl.n	b4fdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4fd0:	6868      	ldr	r0, [r5, #4]
   b4fd2:	f7ff ff47 	bl	b4e64 <free>
    free(conf.tx_buffer);
   b4fd6:	68e8      	ldr	r0, [r5, #12]
   b4fd8:	f7ff ff44 	bl	b4e64 <free>
}
   b4fdc:	4620      	mov	r0, r4
   b4fde:	bd38      	pop	{r3, r4, r5, pc}
   b4fe0:	000b5a94 	.word	0x000b5a94

000b4fe4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4fe4:	4770      	bx	lr

000b4fe6 <_ZN9IPAddressD0Ev>:
   b4fe6:	b510      	push	{r4, lr}
   b4fe8:	2118      	movs	r1, #24
   b4fea:	4604      	mov	r4, r0
   b4fec:	f7ff fa41 	bl	b4472 <_ZdlPvj>
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	bd10      	pop	{r4, pc}

000b4ff4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ff6:	7d03      	ldrb	r3, [r0, #20]
   b4ff8:	2b06      	cmp	r3, #6
{
   b4ffa:	b08d      	sub	sp, #52	; 0x34
   b4ffc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ffe:	f100 0704 	add.w	r7, r0, #4
   b5002:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5006:	d012      	beq.n	b502e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5008:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b500c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5010:	220a      	movs	r2, #10
   b5012:	4630      	mov	r0, r6
   b5014:	f000 f943 	bl	b529e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5018:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b501a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b501c:	d019      	beq.n	b5052 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b501e:	2c00      	cmp	r4, #0
   b5020:	d0f4      	beq.n	b500c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5022:	212e      	movs	r1, #46	; 0x2e
   b5024:	4630      	mov	r0, r6
   b5026:	f000 f937 	bl	b5298 <_ZN5Print5printEc>
   b502a:	4404      	add	r4, r0
   b502c:	e7ee      	b.n	b500c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b502e:	232f      	movs	r3, #47	; 0x2f
   b5030:	466a      	mov	r2, sp
   b5032:	4639      	mov	r1, r7
   b5034:	200a      	movs	r0, #10
		buf[0] = 0;
   b5036:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b503a:	f7ff fddf 	bl	b4bfc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b503e:	4668      	mov	r0, sp
   b5040:	f7ff f9d0 	bl	b43e4 <strlen>
   b5044:	6833      	ldr	r3, [r6, #0]
   b5046:	4602      	mov	r2, r0
   b5048:	68db      	ldr	r3, [r3, #12]
   b504a:	4669      	mov	r1, sp
   b504c:	4630      	mov	r0, r6
   b504e:	4798      	blx	r3
   b5050:	4604      	mov	r4, r0
    }
    return n;
}
   b5052:	4620      	mov	r0, r4
   b5054:	b00d      	add	sp, #52	; 0x34
   b5056:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5058 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5058:	b510      	push	{r4, lr}
   b505a:	4b05      	ldr	r3, [pc, #20]	; (b5070 <_ZN9IPAddressC1Ev+0x18>)
   b505c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b505e:	2211      	movs	r2, #17
   b5060:	f840 3b04 	str.w	r3, [r0], #4
   b5064:	2100      	movs	r1, #0
   b5066:	f000 fc3f 	bl	b58e8 <memset>
}
   b506a:	4620      	mov	r0, r4
   b506c:	bd10      	pop	{r4, pc}
   b506e:	bf00      	nop
   b5070:	000b5abc 	.word	0x000b5abc

000b5074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5074:	4603      	mov	r3, r0
   b5076:	4a07      	ldr	r2, [pc, #28]	; (b5094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5078:	b510      	push	{r4, lr}
   b507a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b507e:	f101 0210 	add.w	r2, r1, #16
   b5082:	f851 4b04 	ldr.w	r4, [r1], #4
   b5086:	f843 4b04 	str.w	r4, [r3], #4
   b508a:	4291      	cmp	r1, r2
   b508c:	d1f9      	bne.n	b5082 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b508e:	780a      	ldrb	r2, [r1, #0]
   b5090:	701a      	strb	r2, [r3, #0]
}
   b5092:	bd10      	pop	{r4, pc}
   b5094:	000b5abc 	.word	0x000b5abc

000b5098 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b509a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b509e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b50a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b50a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b50aa:	2304      	movs	r3, #4
   b50ac:	6041      	str	r1, [r0, #4]
   b50ae:	7503      	strb	r3, [r0, #20]
}
   b50b0:	bd10      	pop	{r4, pc}
	...

000b50b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50b4:	b507      	push	{r0, r1, r2, lr}
   b50b6:	4b06      	ldr	r3, [pc, #24]	; (b50d0 <_ZN9IPAddressC1EPKh+0x1c>)
   b50b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50ba:	78cb      	ldrb	r3, [r1, #3]
   b50bc:	9300      	str	r3, [sp, #0]
   b50be:	788b      	ldrb	r3, [r1, #2]
   b50c0:	784a      	ldrb	r2, [r1, #1]
   b50c2:	7809      	ldrb	r1, [r1, #0]
   b50c4:	f7ff ffe8 	bl	b5098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b50c8:	b003      	add	sp, #12
   b50ca:	f85d fb04 	ldr.w	pc, [sp], #4
   b50ce:	bf00      	nop
   b50d0:	000b5abc 	.word	0x000b5abc

000b50d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50d4:	4b01      	ldr	r3, [pc, #4]	; (b50dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50d6:	4a02      	ldr	r2, [pc, #8]	; (b50e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50da:	4770      	bx	lr
   b50dc:	2003e6c4 	.word	0x2003e6c4
   b50e0:	000b5ac8 	.word	0x000b5ac8

000b50e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b50e4:	2300      	movs	r3, #0
   b50e6:	6840      	ldr	r0, [r0, #4]
   b50e8:	461a      	mov	r2, r3
   b50ea:	f7ff be53 	b.w	b4d94 <network_connect>

000b50ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50ee:	6840      	ldr	r0, [r0, #4]
   b50f0:	2200      	movs	r2, #0
   b50f2:	2102      	movs	r1, #2
   b50f4:	f7ff be5e 	b.w	b4db4 <network_disconnect>

000b50f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50f8:	2200      	movs	r2, #0
   b50fa:	6840      	ldr	r0, [r0, #4]
   b50fc:	4611      	mov	r1, r2
   b50fe:	f7ff be51 	b.w	b4da4 <network_connecting>

000b5102 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5102:	2200      	movs	r2, #0
   b5104:	6840      	ldr	r0, [r0, #4]
   b5106:	4611      	mov	r1, r2
   b5108:	f7ff be5c 	b.w	b4dc4 <network_ready>

000b510c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b510c:	2300      	movs	r3, #0
   b510e:	6840      	ldr	r0, [r0, #4]
   b5110:	461a      	mov	r2, r3
   b5112:	4619      	mov	r1, r3
   b5114:	f7ff be5e 	b.w	b4dd4 <network_on>

000b5118 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5118:	2300      	movs	r3, #0
   b511a:	6840      	ldr	r0, [r0, #4]
   b511c:	461a      	mov	r2, r3
   b511e:	4619      	mov	r1, r3
   b5120:	f7ff be60 	b.w	b4de4 <network_off>

000b5124 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5124:	6840      	ldr	r0, [r0, #4]
   b5126:	2100      	movs	r1, #0
   b5128:	f7ff be84 	b.w	b4e34 <network_is_on>

000b512c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b512c:	6840      	ldr	r0, [r0, #4]
   b512e:	2100      	movs	r1, #0
   b5130:	f7ff be88 	b.w	b4e44 <network_is_off>

000b5134 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5134:	6840      	ldr	r0, [r0, #4]
   b5136:	2200      	movs	r2, #0
   b5138:	f081 0101 	eor.w	r1, r1, #1
   b513c:	f7ff be5a 	b.w	b4df4 <network_listen>

000b5140 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5140:	6840      	ldr	r0, [r0, #4]
   b5142:	2200      	movs	r2, #0
   b5144:	f7ff be66 	b.w	b4e14 <network_set_listen_timeout>

000b5148 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5148:	2200      	movs	r2, #0
   b514a:	6840      	ldr	r0, [r0, #4]
   b514c:	4611      	mov	r1, r2
   b514e:	f7ff be69 	b.w	b4e24 <network_get_listen_timeout>

000b5152 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5152:	2200      	movs	r2, #0
   b5154:	6840      	ldr	r0, [r0, #4]
   b5156:	4611      	mov	r1, r2
   b5158:	f7ff be54 	b.w	b4e04 <network_listening>

000b515c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5160:	b095      	sub	sp, #84	; 0x54
   b5162:	4614      	mov	r4, r2
   b5164:	460d      	mov	r5, r1
   b5166:	4607      	mov	r7, r0
    IPAddress addr;
   b5168:	f7ff ff76 	bl	b5058 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b516c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b516e:	221c      	movs	r2, #28
   b5170:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5172:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5174:	f000 fbb8 	bl	b58e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5178:	2340      	movs	r3, #64	; 0x40
   b517a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b517c:	4620      	mov	r0, r4
   b517e:	466b      	mov	r3, sp
   b5180:	aa0c      	add	r2, sp, #48	; 0x30
   b5182:	2100      	movs	r1, #0
   b5184:	f7ff fd4a 	bl	b4c1c <netdb_getaddrinfo>
    if (!r) {
   b5188:	4604      	mov	r4, r0
   b518a:	2800      	cmp	r0, #0
   b518c:	d14b      	bne.n	b5226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b518e:	4602      	mov	r2, r0
   b5190:	2101      	movs	r1, #1
   b5192:	6868      	ldr	r0, [r5, #4]
   b5194:	f7ff fe16 	bl	b4dc4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5198:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b519a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b519c:	4622      	mov	r2, r4
   b519e:	6868      	ldr	r0, [r5, #4]
   b51a0:	f7ff fe10 	bl	b4dc4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a6:	4681      	mov	r9, r0
        bool ok = false;
   b51a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51aa:	2e00      	cmp	r6, #0
   b51ac:	d03b      	beq.n	b5226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b51ae:	2900      	cmp	r1, #0
   b51b0:	d139      	bne.n	b5226 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b51b2:	6873      	ldr	r3, [r6, #4]
   b51b4:	2b02      	cmp	r3, #2
   b51b6:	d003      	beq.n	b51c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b51b8:	2b0a      	cmp	r3, #10
   b51ba:	d011      	beq.n	b51e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51bc:	69f6      	ldr	r6, [r6, #28]
   b51be:	e7f4      	b.n	b51aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b51c0:	f1b8 0f00 	cmp.w	r8, #0
   b51c4:	d0fa      	beq.n	b51bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b51c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b51c8:	a806      	add	r0, sp, #24
   b51ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b51cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b51ce:	f7ff ff71 	bl	b50b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b51d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51d4:	1d3c      	adds	r4, r7, #4
   b51d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51d8:	682b      	ldr	r3, [r5, #0]
   b51da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b51de:	e7ed      	b.n	b51bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b51e0:	f1b9 0f00 	cmp.w	r9, #0
   b51e4:	d0ea      	beq.n	b51bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b51e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51e8:	2210      	movs	r2, #16
   b51ea:	a801      	add	r0, sp, #4
   b51ec:	f000 fb7c 	bl	b58e8 <memset>
                    a.v = 6;
   b51f0:	2306      	movs	r3, #6
   b51f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51f6:	ad01      	add	r5, sp, #4
   b51f8:	f104 0308 	add.w	r3, r4, #8
   b51fc:	3418      	adds	r4, #24
   b51fe:	6818      	ldr	r0, [r3, #0]
   b5200:	6859      	ldr	r1, [r3, #4]
   b5202:	462a      	mov	r2, r5
   b5204:	c203      	stmia	r2!, {r0, r1}
   b5206:	3308      	adds	r3, #8
   b5208:	42a3      	cmp	r3, r4
   b520a:	4615      	mov	r5, r2
   b520c:	d1f7      	bne.n	b51fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b520e:	a901      	add	r1, sp, #4
   b5210:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5212:	ad07      	add	r5, sp, #28
   b5214:	f7ff ff2e 	bl	b5074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b521a:	1d3c      	adds	r4, r7, #4
   b521c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b521e:	682b      	ldr	r3, [r5, #0]
   b5220:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5222:	4649      	mov	r1, r9
   b5224:	e7ca      	b.n	b51bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5226:	9800      	ldr	r0, [sp, #0]
   b5228:	f7ff fcf0 	bl	b4c0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b522c:	4638      	mov	r0, r7
   b522e:	b015      	add	sp, #84	; 0x54
   b5230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5234 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5234:	4b02      	ldr	r3, [pc, #8]	; (b5240 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5236:	4a03      	ldr	r2, [pc, #12]	; (b5244 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5238:	601a      	str	r2, [r3, #0]
   b523a:	2200      	movs	r2, #0
   b523c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b523e:	4770      	bx	lr
   b5240:	2003e6c8 	.word	0x2003e6c8
   b5244:	000b5ad4 	.word	0x000b5ad4

000b5248 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b524a:	4606      	mov	r6, r0
   b524c:	460d      	mov	r5, r1
  size_t n = 0;
   b524e:	188f      	adds	r7, r1, r2
   b5250:	2400      	movs	r4, #0
  while (size--) {
   b5252:	42bd      	cmp	r5, r7
   b5254:	d00c      	beq.n	b5270 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5256:	6833      	ldr	r3, [r6, #0]
   b5258:	f815 1b01 	ldrb.w	r1, [r5], #1
   b525c:	689b      	ldr	r3, [r3, #8]
   b525e:	4630      	mov	r0, r6
   b5260:	4798      	blx	r3
     if (chunk>=0)
   b5262:	1e03      	subs	r3, r0, #0
   b5264:	db01      	blt.n	b526a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5266:	441c      	add	r4, r3
  while (size--) {
   b5268:	e7f3      	b.n	b5252 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b526a:	2c00      	cmp	r4, #0
   b526c:	bf08      	it	eq
   b526e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5270:	4620      	mov	r0, r4
   b5272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5274 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5274:	b513      	push	{r0, r1, r4, lr}
   b5276:	4604      	mov	r4, r0
    }
   b5278:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b527a:	b159      	cbz	r1, b5294 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b527c:	9101      	str	r1, [sp, #4]
   b527e:	f7ff f8b1 	bl	b43e4 <strlen>
   b5282:	6823      	ldr	r3, [r4, #0]
   b5284:	9901      	ldr	r1, [sp, #4]
   b5286:	68db      	ldr	r3, [r3, #12]
   b5288:	4602      	mov	r2, r0
   b528a:	4620      	mov	r0, r4
    }
   b528c:	b002      	add	sp, #8
   b528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5292:	4718      	bx	r3
    }
   b5294:	b002      	add	sp, #8
   b5296:	bd10      	pop	{r4, pc}

000b5298 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5298:	6803      	ldr	r3, [r0, #0]
   b529a:	689b      	ldr	r3, [r3, #8]
   b529c:	4718      	bx	r3

000b529e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b529e:	b530      	push	{r4, r5, lr}
   b52a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b52a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b52a4:	2a01      	cmp	r2, #1
  *str = '\0';
   b52a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b52aa:	bf98      	it	ls
   b52ac:	220a      	movls	r2, #10
   b52ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b52b0:	460d      	mov	r5, r1
   b52b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b52b6:	fb01 5312 	mls	r3, r1, r2, r5
   b52ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52be:	2b09      	cmp	r3, #9
   b52c0:	bf94      	ite	ls
   b52c2:	3330      	addls	r3, #48	; 0x30
   b52c4:	3337      	addhi	r3, #55	; 0x37
   b52c6:	b2db      	uxtb	r3, r3
  } while(n);
   b52c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b52ce:	d9ef      	bls.n	b52b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b52d0:	4621      	mov	r1, r4
   b52d2:	f7ff ffcf 	bl	b5274 <_ZN5Print5writeEPKc>
}
   b52d6:	b00b      	add	sp, #44	; 0x2c
   b52d8:	bd30      	pop	{r4, r5, pc}
	...

000b52dc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b52dc:	4b01      	ldr	r3, [pc, #4]	; (b52e4 <_GLOBAL__sub_I_RGB+0x8>)
   b52de:	2200      	movs	r2, #0
   b52e0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b52e2:	4770      	bx	lr
   b52e4:	2003e6d0 	.word	0x2003e6d0

000b52e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b52e8:	b510      	push	{r4, lr}
   b52ea:	4604      	mov	r4, r0
   b52ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b52ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b52f0:	f7ff fc9c 	bl	b4c2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b52f4:	2300      	movs	r3, #0
   b52f6:	6063      	str	r3, [r4, #4]
}
   b52f8:	4620      	mov	r0, r4
   b52fa:	bd10      	pop	{r4, pc}

000b52fc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b52fc:	4b05      	ldr	r3, [pc, #20]	; (b5314 <_GLOBAL__sub_I_System+0x18>)
   b52fe:	2202      	movs	r2, #2
   b5300:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5302:	4b05      	ldr	r3, [pc, #20]	; (b5318 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5304:	4a05      	ldr	r2, [pc, #20]	; (b531c <_GLOBAL__sub_I_System+0x20>)
   b5306:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5308:	2000      	movs	r0, #0
   b530a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b530e:	f7ff bd0d 	b.w	b4d2c <set_system_mode>
   b5312:	bf00      	nop
   b5314:	2003e6ec 	.word	0x2003e6ec
   b5318:	2003e6e0 	.word	0x2003e6e0
   b531c:	ffff0000 	.word	0xffff0000

000b5320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5320:	4b02      	ldr	r3, [pc, #8]	; (b532c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5322:	681a      	ldr	r2, [r3, #0]
   b5324:	4b02      	ldr	r3, [pc, #8]	; (b5330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5326:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5328:	4770      	bx	lr
   b532a:	bf00      	nop
   b532c:	2003e564 	.word	0x2003e564
   b5330:	2003e6f0 	.word	0x2003e6f0

000b5334 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5334:	4770      	bx	lr

000b5336 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5336:	7441      	strb	r1, [r0, #17]
}
   b5338:	4770      	bx	lr

000b533a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b533a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b533c:	7c00      	ldrb	r0, [r0, #16]
   b533e:	f7ff fcb5 	bl	b4cac <hal_usart_available_data_for_write>
}
   b5342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5346:	bd08      	pop	{r3, pc}

000b5348 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5348:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b534a:	7c00      	ldrb	r0, [r0, #16]
   b534c:	f7ff fc86 	bl	b4c5c <hal_usart_available>
}
   b5350:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5354:	bd08      	pop	{r3, pc}

000b5356 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5356:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5358:	7c00      	ldrb	r0, [r0, #16]
   b535a:	f7ff fc8f 	bl	b4c7c <hal_usart_peek>
}
   b535e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5362:	bd08      	pop	{r3, pc}

000b5364 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5364:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5366:	7c00      	ldrb	r0, [r0, #16]
   b5368:	f7ff fc80 	bl	b4c6c <hal_usart_read>
}
   b536c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5370:	bd08      	pop	{r3, pc}

000b5372 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5372:	7c00      	ldrb	r0, [r0, #16]
   b5374:	f7ff bc8a 	b.w	b4c8c <hal_usart_flush>

000b5378 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5378:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b537a:	7c45      	ldrb	r5, [r0, #17]
{
   b537c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b537e:	b12d      	cbz	r5, b538c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5380:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5382:	b003      	add	sp, #12
   b5384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5388:	f7ff bc60 	b.w	b4c4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b538c:	7c00      	ldrb	r0, [r0, #16]
   b538e:	9101      	str	r1, [sp, #4]
   b5390:	f7ff fc8c 	bl	b4cac <hal_usart_available_data_for_write>
   b5394:	2800      	cmp	r0, #0
   b5396:	9901      	ldr	r1, [sp, #4]
   b5398:	dcf2      	bgt.n	b5380 <_ZN11USARTSerial5writeEh+0x8>
}
   b539a:	4628      	mov	r0, r5
   b539c:	b003      	add	sp, #12
   b539e:	bd30      	pop	{r4, r5, pc}

000b53a0 <_ZN11USARTSerialD0Ev>:
   b53a0:	b510      	push	{r4, lr}
   b53a2:	2114      	movs	r1, #20
   b53a4:	4604      	mov	r4, r0
   b53a6:	f7ff f864 	bl	b4472 <_ZdlPvj>
   b53aa:	4620      	mov	r0, r4
   b53ac:	bd10      	pop	{r4, pc}
	...

000b53b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53b0:	b510      	push	{r4, lr}
   b53b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53b6:	4604      	mov	r4, r0
   b53b8:	4608      	mov	r0, r1
   b53ba:	4611      	mov	r1, r2
   b53bc:	2200      	movs	r2, #0
   b53be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53c2:	4b04      	ldr	r3, [pc, #16]	; (b53d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53c6:	2301      	movs	r3, #1
  _serial = serial;
   b53c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53cc:	f7ff fc76 	bl	b4cbc <hal_usart_init_ex>
}
   b53d0:	4620      	mov	r0, r4
   b53d2:	bd10      	pop	{r4, pc}
   b53d4:	000b5b2c 	.word	0x000b5b2c

000b53d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53d8:	7441      	strb	r1, [r0, #17]
}
   b53da:	4770      	bx	lr

000b53dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53dc:	4770      	bx	lr

000b53de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b53de:	4770      	bx	lr

000b53e0 <_ZN9USBSerial4readEv>:
{
   b53e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b53e2:	2100      	movs	r1, #0
   b53e4:	7c00      	ldrb	r0, [r0, #16]
   b53e6:	f7ff fc89 	bl	b4cfc <HAL_USB_USART_Receive_Data>
}
   b53ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53ee:	bd08      	pop	{r3, pc}

000b53f0 <_ZN9USBSerial4peekEv>:
{
   b53f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b53f2:	2101      	movs	r1, #1
   b53f4:	7c00      	ldrb	r0, [r0, #16]
   b53f6:	f7ff fc81 	bl	b4cfc <HAL_USB_USART_Receive_Data>
}
   b53fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53fe:	bd08      	pop	{r3, pc}

000b5400 <_ZN9USBSerial17availableForWriteEv>:
{
   b5400:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5402:	7c00      	ldrb	r0, [r0, #16]
   b5404:	f7ff fc72 	bl	b4cec <HAL_USB_USART_Available_Data_For_Write>
}
   b5408:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b540c:	bd08      	pop	{r3, pc}

000b540e <_ZN9USBSerial9availableEv>:
{
   b540e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5410:	7c00      	ldrb	r0, [r0, #16]
   b5412:	f7ff fc63 	bl	b4cdc <HAL_USB_USART_Available_Data>
}
   b5416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b541a:	bd08      	pop	{r3, pc}

000b541c <_ZN9USBSerial5writeEh>:
{
   b541c:	b513      	push	{r0, r1, r4, lr}
   b541e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5420:	7c00      	ldrb	r0, [r0, #16]
{
   b5422:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5424:	f7ff fc62 	bl	b4cec <HAL_USB_USART_Available_Data_For_Write>
   b5428:	2800      	cmp	r0, #0
   b542a:	9901      	ldr	r1, [sp, #4]
   b542c:	dc01      	bgt.n	b5432 <_ZN9USBSerial5writeEh+0x16>
   b542e:	7c60      	ldrb	r0, [r4, #17]
   b5430:	b120      	cbz	r0, b543c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5432:	7c20      	ldrb	r0, [r4, #16]
   b5434:	f7ff fc6a 	bl	b4d0c <HAL_USB_USART_Send_Data>
   b5438:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b543c:	b002      	add	sp, #8
   b543e:	bd10      	pop	{r4, pc}

000b5440 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5440:	7c00      	ldrb	r0, [r0, #16]
   b5442:	f7ff bc6b 	b.w	b4d1c <HAL_USB_USART_Flush_Data>

000b5446 <_ZN9USBSerialD0Ev>:
   b5446:	b510      	push	{r4, lr}
   b5448:	2114      	movs	r1, #20
   b544a:	4604      	mov	r4, r0
   b544c:	f7ff f811 	bl	b4472 <_ZdlPvj>
   b5450:	4620      	mov	r0, r4
   b5452:	bd10      	pop	{r4, pc}

000b5454 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5454:	b510      	push	{r4, lr}
   b5456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b545a:	4604      	mov	r4, r0
   b545c:	4608      	mov	r0, r1
   b545e:	2100      	movs	r1, #0
   b5460:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5464:	4b04      	ldr	r3, [pc, #16]	; (b5478 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5466:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5468:	2301      	movs	r3, #1
  _serial = serial;
   b546a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b546c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b546e:	4611      	mov	r1, r2
   b5470:	f7ff fc2c 	bl	b4ccc <HAL_USB_USART_Init>
}
   b5474:	4620      	mov	r0, r4
   b5476:	bd10      	pop	{r4, pc}
   b5478:	000b5b5c 	.word	0x000b5b5c

000b547c <_Z19acquireSerialBufferv>:
{
   b547c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b547e:	2214      	movs	r2, #20
{
   b5480:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5482:	2100      	movs	r1, #0
   b5484:	f000 fa30 	bl	b58e8 <memset>
}
   b5488:	4620      	mov	r0, r4
   b548a:	bd10      	pop	{r4, pc}

000b548c <_Z16_fetch_usbserialv>:
{
   b548c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b548e:	4c0f      	ldr	r4, [pc, #60]	; (b54cc <_Z16_fetch_usbserialv+0x40>)
{
   b5490:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5492:	a803      	add	r0, sp, #12
   b5494:	f7ff fff2 	bl	b547c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5498:	7821      	ldrb	r1, [r4, #0]
   b549a:	f3bf 8f5b 	dmb	ish
   b549e:	f011 0101 	ands.w	r1, r1, #1
   b54a2:	d10f      	bne.n	b54c4 <_Z16_fetch_usbserialv+0x38>
   b54a4:	4620      	mov	r0, r4
   b54a6:	9101      	str	r1, [sp, #4]
   b54a8:	f7fe ffe5 	bl	b4476 <__cxa_guard_acquire>
   b54ac:	9901      	ldr	r1, [sp, #4]
   b54ae:	b148      	cbz	r0, b54c4 <_Z16_fetch_usbserialv+0x38>
   b54b0:	aa03      	add	r2, sp, #12
   b54b2:	4807      	ldr	r0, [pc, #28]	; (b54d0 <_Z16_fetch_usbserialv+0x44>)
   b54b4:	f7ff ffce 	bl	b5454 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b54b8:	4620      	mov	r0, r4
   b54ba:	f7fe ffe1 	bl	b4480 <__cxa_guard_release>
   b54be:	4805      	ldr	r0, [pc, #20]	; (b54d4 <_Z16_fetch_usbserialv+0x48>)
   b54c0:	f000 f9fe 	bl	b58c0 <atexit>
	return _usbserial;
}
   b54c4:	4802      	ldr	r0, [pc, #8]	; (b54d0 <_Z16_fetch_usbserialv+0x44>)
   b54c6:	b008      	add	sp, #32
   b54c8:	bd10      	pop	{r4, pc}
   b54ca:	bf00      	nop
   b54cc:	2003e6f4 	.word	0x2003e6f4
   b54d0:	2003e6f8 	.word	0x2003e6f8
   b54d4:	000b53dd 	.word	0x000b53dd

000b54d8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b54d8:	2200      	movs	r2, #0
   b54da:	6840      	ldr	r0, [r0, #4]
   b54dc:	4611      	mov	r1, r2
   b54de:	f7ff bc71 	b.w	b4dc4 <network_ready>

000b54e2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54e2:	2200      	movs	r2, #0
   b54e4:	6840      	ldr	r0, [r0, #4]
   b54e6:	4611      	mov	r1, r2
   b54e8:	f7ff bc8c 	b.w	b4e04 <network_listening>

000b54ec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b54ec:	2200      	movs	r2, #0
   b54ee:	6840      	ldr	r0, [r0, #4]
   b54f0:	4611      	mov	r1, r2
   b54f2:	f7ff bc97 	b.w	b4e24 <network_get_listen_timeout>

000b54f6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b54f6:	6840      	ldr	r0, [r0, #4]
   b54f8:	2200      	movs	r2, #0
   b54fa:	f7ff bc8b 	b.w	b4e14 <network_set_listen_timeout>

000b54fe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b54fe:	6840      	ldr	r0, [r0, #4]
   b5500:	2200      	movs	r2, #0
   b5502:	f081 0101 	eor.w	r1, r1, #1
   b5506:	f7ff bc75 	b.w	b4df4 <network_listen>

000b550a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b550a:	2300      	movs	r3, #0
   b550c:	6840      	ldr	r0, [r0, #4]
   b550e:	461a      	mov	r2, r3
   b5510:	4619      	mov	r1, r3
   b5512:	f7ff bc67 	b.w	b4de4 <network_off>

000b5516 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5516:	2300      	movs	r3, #0
   b5518:	6840      	ldr	r0, [r0, #4]
   b551a:	461a      	mov	r2, r3
   b551c:	4619      	mov	r1, r3
   b551e:	f7ff bc59 	b.w	b4dd4 <network_on>

000b5522 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5522:	2200      	movs	r2, #0
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	4611      	mov	r1, r2
   b5528:	f7ff bc3c 	b.w	b4da4 <network_connecting>

000b552c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b552c:	6840      	ldr	r0, [r0, #4]
   b552e:	2200      	movs	r2, #0
   b5530:	2102      	movs	r1, #2
   b5532:	f7ff bc3f 	b.w	b4db4 <network_disconnect>

000b5536 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5536:	2300      	movs	r3, #0
   b5538:	6840      	ldr	r0, [r0, #4]
   b553a:	461a      	mov	r2, r3
   b553c:	f7ff bc2a 	b.w	b4d94 <network_connect>

000b5540 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5540:	4b02      	ldr	r3, [pc, #8]	; (b554c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5542:	2204      	movs	r2, #4
   b5544:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5546:	4a02      	ldr	r2, [pc, #8]	; (b5550 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5548:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b554a:	4770      	bx	lr
   b554c:	2003e70c 	.word	0x2003e70c
   b5550:	000b5b8c 	.word	0x000b5b8c

000b5554 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5554:	4b01      	ldr	r3, [pc, #4]	; (b555c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5556:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5558:	4770      	bx	lr
   b555a:	bf00      	nop
   b555c:	2003e568 	.word	0x2003e568

000b5560 <serialEventRun>:
{
   b5560:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5562:	4b0b      	ldr	r3, [pc, #44]	; (b5590 <serialEventRun+0x30>)
   b5564:	b143      	cbz	r3, b5578 <serialEventRun+0x18>
   b5566:	f7ff ff91 	bl	b548c <_Z16_fetch_usbserialv>
   b556a:	6803      	ldr	r3, [r0, #0]
   b556c:	691b      	ldr	r3, [r3, #16]
   b556e:	4798      	blx	r3
   b5570:	2800      	cmp	r0, #0
   b5572:	dd01      	ble.n	b5578 <serialEventRun+0x18>
        serialEvent();
   b5574:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5578:	4b06      	ldr	r3, [pc, #24]	; (b5594 <serialEventRun+0x34>)
   b557a:	b143      	cbz	r3, b558e <serialEventRun+0x2e>
   b557c:	f000 f974 	bl	b5868 <_Z22__fetch_global_Serial1v>
   b5580:	6803      	ldr	r3, [r0, #0]
   b5582:	691b      	ldr	r3, [r3, #16]
   b5584:	4798      	blx	r3
   b5586:	2800      	cmp	r0, #0
   b5588:	dd01      	ble.n	b558e <serialEventRun+0x2e>
        serialEvent1();
   b558a:	f3af 8000 	nop.w
}
   b558e:	bd08      	pop	{r3, pc}
	...

000b5598 <_post_loop>:
{
   b5598:	b508      	push	{r3, lr}
	serialEventRun();
   b559a:	f7ff ffe1 	bl	b5560 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b559e:	f7ff fabd 	bl	b4b1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55a2:	4b01      	ldr	r3, [pc, #4]	; (b55a8 <_post_loop+0x10>)
   b55a4:	6018      	str	r0, [r3, #0]
}
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	2003e728 	.word	0x2003e728

000b55ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55ac:	4805      	ldr	r0, [pc, #20]	; (b55c4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b55ae:	4a06      	ldr	r2, [pc, #24]	; (b55c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b55b0:	4906      	ldr	r1, [pc, #24]	; (b55cc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b55b2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55b4:	1a12      	subs	r2, r2, r0
   b55b6:	f000 f989 	bl	b58cc <memcpy>
    __backup_sram_signature = signature;
   b55ba:	4b05      	ldr	r3, [pc, #20]	; (b55d0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b55bc:	4a05      	ldr	r2, [pc, #20]	; (b55d4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b55be:	601a      	str	r2, [r3, #0]
}
   b55c0:	bd08      	pop	{r3, pc}
   b55c2:	bf00      	nop
   b55c4:	2003f400 	.word	0x2003f400
   b55c8:	2003f404 	.word	0x2003f404
   b55cc:	000b5cf4 	.word	0x000b5cf4
   b55d0:	2003f400 	.word	0x2003f400
   b55d4:	9a271c1e 	.word	0x9a271c1e

000b55d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b55d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b55da:	2300      	movs	r3, #0
   b55dc:	9300      	str	r3, [sp, #0]
   b55de:	461a      	mov	r2, r3
   b55e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b55e4:	f7ff fbc4 	bl	b4d70 <system_ctrl_set_result>
}
   b55e8:	b003      	add	sp, #12
   b55ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b55f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b55f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b55f2:	8843      	ldrh	r3, [r0, #2]
   b55f4:	2b0a      	cmp	r3, #10
   b55f6:	d008      	beq.n	b560a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b55f8:	2b50      	cmp	r3, #80	; 0x50
   b55fa:	d10b      	bne.n	b5614 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b55fc:	4b09      	ldr	r3, [pc, #36]	; (b5624 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b55fe:	681b      	ldr	r3, [r3, #0]
   b5600:	b14b      	cbz	r3, b5616 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5602:	b003      	add	sp, #12
   b5604:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5608:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b560a:	f7ff ffe5 	bl	b55d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b560e:	b003      	add	sp, #12
   b5610:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5614:	2300      	movs	r3, #0
   b5616:	9300      	str	r3, [sp, #0]
   b5618:	461a      	mov	r2, r3
   b561a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b561e:	f7ff fba7 	bl	b4d70 <system_ctrl_set_result>
}
   b5622:	e7f4      	b.n	b560e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5624:	2003e718 	.word	0x2003e718

000b5628 <module_user_init_hook>:
{
   b5628:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b562a:	4812      	ldr	r0, [pc, #72]	; (b5674 <module_user_init_hook+0x4c>)
   b562c:	2100      	movs	r1, #0
   b562e:	f7ff fc31 	bl	b4e94 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5632:	4b11      	ldr	r3, [pc, #68]	; (b5678 <module_user_init_hook+0x50>)
   b5634:	681a      	ldr	r2, [r3, #0]
   b5636:	4b11      	ldr	r3, [pc, #68]	; (b567c <module_user_init_hook+0x54>)
   b5638:	429a      	cmp	r2, r3
   b563a:	4b11      	ldr	r3, [pc, #68]	; (b5680 <module_user_init_hook+0x58>)
   b563c:	bf0c      	ite	eq
   b563e:	2201      	moveq	r2, #1
   b5640:	2200      	movne	r2, #0
   b5642:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5644:	d001      	beq.n	b564a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5646:	f7ff ffb1 	bl	b55ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b564a:	f7ff fa5f 	bl	b4b0c <HAL_RNG_GetRandomNumber>
   b564e:	4604      	mov	r4, r0
    srand(seed);
   b5650:	f000 f952 	bl	b58f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5654:	4b0b      	ldr	r3, [pc, #44]	; (b5684 <module_user_init_hook+0x5c>)
   b5656:	b113      	cbz	r3, b565e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5658:	4620      	mov	r0, r4
   b565a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b565e:	2100      	movs	r1, #0
   b5660:	4808      	ldr	r0, [pc, #32]	; (b5684 <module_user_init_hook+0x5c>)
   b5662:	f7ff fb8f 	bl	b4d84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b566a:	4807      	ldr	r0, [pc, #28]	; (b5688 <module_user_init_hook+0x60>)
   b566c:	2100      	movs	r1, #0
   b566e:	f7ff bb75 	b.w	b4d5c <system_ctrl_set_app_request_handler>
   b5672:	bf00      	nop
   b5674:	000b5555 	.word	0x000b5555
   b5678:	2003f400 	.word	0x2003f400
   b567c:	9a271c1e 	.word	0x9a271c1e
   b5680:	2003e714 	.word	0x2003e714
   b5684:	00000000 	.word	0x00000000
   b5688:	000b55f1 	.word	0x000b55f1

000b568c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b568c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b568e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5690:	d902      	bls.n	b5698 <pinAvailable+0xc>
    return false;
   b5692:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5694:	b002      	add	sp, #8
   b5696:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5698:	f1a0 030b 	sub.w	r3, r0, #11
   b569c:	2b02      	cmp	r3, #2
   b569e:	d81a      	bhi.n	b56d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56a0:	4c17      	ldr	r4, [pc, #92]	; (b5700 <pinAvailable+0x74>)
   b56a2:	7821      	ldrb	r1, [r4, #0]
   b56a4:	f3bf 8f5b 	dmb	ish
   b56a8:	f011 0101 	ands.w	r1, r1, #1
   b56ac:	d10b      	bne.n	b56c6 <pinAvailable+0x3a>
   b56ae:	4620      	mov	r0, r4
   b56b0:	9101      	str	r1, [sp, #4]
   b56b2:	f7fe fee0 	bl	b4476 <__cxa_guard_acquire>
   b56b6:	9901      	ldr	r1, [sp, #4]
   b56b8:	b128      	cbz	r0, b56c6 <pinAvailable+0x3a>
   b56ba:	4812      	ldr	r0, [pc, #72]	; (b5704 <pinAvailable+0x78>)
   b56bc:	f7ff fe14 	bl	b52e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56c0:	4620      	mov	r0, r4
   b56c2:	f7fe fedd 	bl	b4480 <__cxa_guard_release>
   b56c6:	4b0f      	ldr	r3, [pc, #60]	; (b5704 <pinAvailable+0x78>)
   b56c8:	7818      	ldrb	r0, [r3, #0]
   b56ca:	f7ff fab7 	bl	b4c3c <hal_spi_is_enabled>
   b56ce:	2800      	cmp	r0, #0
   b56d0:	d1df      	bne.n	b5692 <pinAvailable+0x6>
  return true; // 'pin' is available
   b56d2:	2001      	movs	r0, #1
   b56d4:	e7de      	b.n	b5694 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b56d6:	2801      	cmp	r0, #1
   b56d8:	d809      	bhi.n	b56ee <pinAvailable+0x62>
   b56da:	f000 f885 	bl	b57e8 <_Z19__fetch_global_Wirev>
   b56de:	2100      	movs	r1, #0
   b56e0:	7c00      	ldrb	r0, [r0, #16]
   b56e2:	f7ff fa7b 	bl	b4bdc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b56e6:	f080 0001 	eor.w	r0, r0, #1
   b56ea:	b2c0      	uxtb	r0, r0
   b56ec:	e7d2      	b.n	b5694 <pinAvailable+0x8>
   b56ee:	3809      	subs	r0, #9
   b56f0:	2801      	cmp	r0, #1
   b56f2:	d8ee      	bhi.n	b56d2 <pinAvailable+0x46>
   b56f4:	f000 f8b8 	bl	b5868 <_Z22__fetch_global_Serial1v>
   b56f8:	7c00      	ldrb	r0, [r0, #16]
   b56fa:	f7ff facf 	bl	b4c9c <hal_usart_is_enabled>
   b56fe:	e7f2      	b.n	b56e6 <pinAvailable+0x5a>
   b5700:	2003e71c 	.word	0x2003e71c
   b5704:	2003e720 	.word	0x2003e720

000b5708 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5708:	2823      	cmp	r0, #35	; 0x23
{
   b570a:	b538      	push	{r3, r4, r5, lr}
   b570c:	4604      	mov	r4, r0
   b570e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5710:	d80a      	bhi.n	b5728 <pinMode+0x20>
   b5712:	29ff      	cmp	r1, #255	; 0xff
   b5714:	d008      	beq.n	b5728 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5716:	f7ff ffb9 	bl	b568c <pinAvailable>
   b571a:	b128      	cbz	r0, b5728 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b571c:	4629      	mov	r1, r5
   b571e:	4620      	mov	r0, r4
}
   b5720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5724:	f7ff ba0a 	b.w	b4b3c <hal_gpio_mode>
}
   b5728:	bd38      	pop	{r3, r4, r5, pc}

000b572a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b572a:	b538      	push	{r3, r4, r5, lr}
   b572c:	4604      	mov	r4, r0
   b572e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5730:	f7ff fa0c 	bl	b4b4c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5734:	28ff      	cmp	r0, #255	; 0xff
   b5736:	d010      	beq.n	b575a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5738:	2806      	cmp	r0, #6
   b573a:	d804      	bhi.n	b5746 <digitalWrite+0x1c>
   b573c:	234d      	movs	r3, #77	; 0x4d
   b573e:	fa23 f000 	lsr.w	r0, r3, r0
   b5742:	07c3      	lsls	r3, r0, #31
   b5744:	d409      	bmi.n	b575a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5746:	4620      	mov	r0, r4
   b5748:	f7ff ffa0 	bl	b568c <pinAvailable>
   b574c:	b128      	cbz	r0, b575a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b574e:	4629      	mov	r1, r5
   b5750:	4620      	mov	r0, r4
}
   b5752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5756:	f7ff ba01 	b.w	b4b5c <hal_gpio_write>
}
   b575a:	bd38      	pop	{r3, r4, r5, pc}

000b575c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b575c:	b510      	push	{r4, lr}
   b575e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5760:	f7ff f9f4 	bl	b4b4c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5764:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5766:	b2db      	uxtb	r3, r3
   b5768:	2b01      	cmp	r3, #1
   b576a:	d908      	bls.n	b577e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b576c:	4620      	mov	r0, r4
   b576e:	f7ff ff8d 	bl	b568c <pinAvailable>
   b5772:	b120      	cbz	r0, b577e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b5774:	4620      	mov	r0, r4
}
   b5776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b577a:	f7ff b9f7 	b.w	b4b6c <hal_gpio_read>
}
   b577e:	2000      	movs	r0, #0
   b5780:	bd10      	pop	{r4, pc}

000b5782 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5782:	280d      	cmp	r0, #13
{
   b5784:	b510      	push	{r4, lr}
   b5786:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5788:	bf9c      	itt	ls
   b578a:	340e      	addls	r4, #14
   b578c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b578e:	4620      	mov	r0, r4
   b5790:	f7ff ff7c 	bl	b568c <pinAvailable>
   b5794:	b150      	cbz	r0, b57ac <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b5796:	2103      	movs	r1, #3
   b5798:	4620      	mov	r0, r4
   b579a:	f7ff f9c7 	bl	b4b2c <hal_pin_validate_function>
   b579e:	2803      	cmp	r0, #3
   b57a0:	d104      	bne.n	b57ac <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b57a2:	4620      	mov	r0, r4
}
   b57a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b57a8:	f7ff b9e8 	b.w	b4b7c <hal_adc_read>
}
   b57ac:	2000      	movs	r0, #0
   b57ae:	bd10      	pop	{r4, pc}

000b57b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57b0:	4770      	bx	lr
	...

000b57b4 <_Z17acquireWireBufferv>:
{
   b57b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b57b6:	4b0a      	ldr	r3, [pc, #40]	; (b57e0 <_Z17acquireWireBufferv+0x2c>)
   b57b8:	6003      	str	r3, [r0, #0]
   b57ba:	2301      	movs	r3, #1
{
   b57bc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b57be:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57c0:	4908      	ldr	r1, [pc, #32]	; (b57e4 <_Z17acquireWireBufferv+0x30>)
   b57c2:	2020      	movs	r0, #32
   b57c4:	f000 f874 	bl	b58b0 <_ZnajRKSt9nothrow_t>
	};
   b57c8:	2520      	movs	r5, #32
   b57ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57cc:	4905      	ldr	r1, [pc, #20]	; (b57e4 <_Z17acquireWireBufferv+0x30>)
	};
   b57ce:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57d0:	4628      	mov	r0, r5
   b57d2:	f000 f86d 	bl	b58b0 <_ZnajRKSt9nothrow_t>
	};
   b57d6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b57da:	4620      	mov	r0, r4
   b57dc:	bd38      	pop	{r3, r4, r5, pc}
   b57de:	bf00      	nop
   b57e0:	00010018 	.word	0x00010018
   b57e4:	000b5bc0 	.word	0x000b5bc0

000b57e8 <_Z19__fetch_global_Wirev>:
{
   b57e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57ea:	4d0e      	ldr	r5, [pc, #56]	; (b5824 <_Z19__fetch_global_Wirev+0x3c>)
   b57ec:	7829      	ldrb	r1, [r5, #0]
   b57ee:	f3bf 8f5b 	dmb	ish
   b57f2:	f011 0401 	ands.w	r4, r1, #1
{
   b57f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57f8:	d111      	bne.n	b581e <_Z19__fetch_global_Wirev+0x36>
   b57fa:	4628      	mov	r0, r5
   b57fc:	f7fe fe3b 	bl	b4476 <__cxa_guard_acquire>
   b5800:	b168      	cbz	r0, b581e <_Z19__fetch_global_Wirev+0x36>
   b5802:	4668      	mov	r0, sp
   b5804:	f7ff ffd6 	bl	b57b4 <_Z17acquireWireBufferv>
   b5808:	466a      	mov	r2, sp
   b580a:	4621      	mov	r1, r4
   b580c:	4806      	ldr	r0, [pc, #24]	; (b5828 <_Z19__fetch_global_Wirev+0x40>)
   b580e:	f7ff fbcb 	bl	b4fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5812:	4628      	mov	r0, r5
   b5814:	f7fe fe34 	bl	b4480 <__cxa_guard_release>
   b5818:	4804      	ldr	r0, [pc, #16]	; (b582c <_Z19__fetch_global_Wirev+0x44>)
   b581a:	f000 f851 	bl	b58c0 <atexit>
	return wire;
}
   b581e:	4802      	ldr	r0, [pc, #8]	; (b5828 <_Z19__fetch_global_Wirev+0x40>)
   b5820:	b007      	add	sp, #28
   b5822:	bd30      	pop	{r4, r5, pc}
   b5824:	2003e72c 	.word	0x2003e72c
   b5828:	2003e730 	.word	0x2003e730
   b582c:	000b57b1 	.word	0x000b57b1

000b5830 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5830:	4770      	bx	lr
	...

000b5834 <_Z20acquireSerial1Bufferv>:
{
   b5834:	b538      	push	{r3, r4, r5, lr}
   b5836:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5838:	2514      	movs	r5, #20
   b583a:	462a      	mov	r2, r5
   b583c:	2100      	movs	r1, #0
   b583e:	f000 f853 	bl	b58e8 <memset>
   b5842:	8025      	strh	r5, [r4, #0]
   b5844:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5846:	4907      	ldr	r1, [pc, #28]	; (b5864 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5848:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b584a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b584c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b584e:	f000 f82f 	bl	b58b0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5852:	4904      	ldr	r1, [pc, #16]	; (b5864 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5854:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5856:	4628      	mov	r0, r5
   b5858:	f000 f82a 	bl	b58b0 <_ZnajRKSt9nothrow_t>
    };
   b585c:	60e0      	str	r0, [r4, #12]
}
   b585e:	4620      	mov	r0, r4
   b5860:	bd38      	pop	{r3, r4, r5, pc}
   b5862:	bf00      	nop
   b5864:	000b5bc0 	.word	0x000b5bc0

000b5868 <_Z22__fetch_global_Serial1v>:
{
   b5868:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b586a:	4d0e      	ldr	r5, [pc, #56]	; (b58a4 <_Z22__fetch_global_Serial1v+0x3c>)
   b586c:	7829      	ldrb	r1, [r5, #0]
   b586e:	f3bf 8f5b 	dmb	ish
   b5872:	f011 0401 	ands.w	r4, r1, #1
{
   b5876:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5878:	d111      	bne.n	b589e <_Z22__fetch_global_Serial1v+0x36>
   b587a:	4628      	mov	r0, r5
   b587c:	f7fe fdfb 	bl	b4476 <__cxa_guard_acquire>
   b5880:	b168      	cbz	r0, b589e <_Z22__fetch_global_Serial1v+0x36>
   b5882:	a801      	add	r0, sp, #4
   b5884:	f7ff ffd6 	bl	b5834 <_Z20acquireSerial1Bufferv>
   b5888:	aa01      	add	r2, sp, #4
   b588a:	4621      	mov	r1, r4
   b588c:	4806      	ldr	r0, [pc, #24]	; (b58a8 <_Z22__fetch_global_Serial1v+0x40>)
   b588e:	f7ff fd8f 	bl	b53b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5892:	4628      	mov	r0, r5
   b5894:	f7fe fdf4 	bl	b4480 <__cxa_guard_release>
   b5898:	4804      	ldr	r0, [pc, #16]	; (b58ac <_Z22__fetch_global_Serial1v+0x44>)
   b589a:	f000 f811 	bl	b58c0 <atexit>
    return serial1;
}
   b589e:	4802      	ldr	r0, [pc, #8]	; (b58a8 <_Z22__fetch_global_Serial1v+0x40>)
   b58a0:	b007      	add	sp, #28
   b58a2:	bd30      	pop	{r4, r5, pc}
   b58a4:	2003e744 	.word	0x2003e744
   b58a8:	2003e748 	.word	0x2003e748
   b58ac:	000b5831 	.word	0x000b5831

000b58b0 <_ZnajRKSt9nothrow_t>:
   b58b0:	f7fe bddd 	b.w	b446e <_Znaj>

000b58b4 <_ZSt20__throw_length_errorPKc>:
   b58b4:	b508      	push	{r3, lr}
   b58b6:	f7ff fadd 	bl	b4e74 <abort>

000b58ba <_ZSt25__throw_bad_function_callv>:
   b58ba:	b508      	push	{r3, lr}
   b58bc:	f7ff fada 	bl	b4e74 <abort>

000b58c0 <atexit>:
   b58c0:	2300      	movs	r3, #0
   b58c2:	4601      	mov	r1, r0
   b58c4:	461a      	mov	r2, r3
   b58c6:	4618      	mov	r0, r3
   b58c8:	f000 b844 	b.w	b5954 <__register_exitproc>

000b58cc <memcpy>:
   b58cc:	440a      	add	r2, r1
   b58ce:	4291      	cmp	r1, r2
   b58d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b58d4:	d100      	bne.n	b58d8 <memcpy+0xc>
   b58d6:	4770      	bx	lr
   b58d8:	b510      	push	{r4, lr}
   b58da:	f811 4b01 	ldrb.w	r4, [r1], #1
   b58de:	f803 4f01 	strb.w	r4, [r3, #1]!
   b58e2:	4291      	cmp	r1, r2
   b58e4:	d1f9      	bne.n	b58da <memcpy+0xe>
   b58e6:	bd10      	pop	{r4, pc}

000b58e8 <memset>:
   b58e8:	4402      	add	r2, r0
   b58ea:	4603      	mov	r3, r0
   b58ec:	4293      	cmp	r3, r2
   b58ee:	d100      	bne.n	b58f2 <memset+0xa>
   b58f0:	4770      	bx	lr
   b58f2:	f803 1b01 	strb.w	r1, [r3], #1
   b58f6:	e7f9      	b.n	b58ec <memset+0x4>

000b58f8 <srand>:
   b58f8:	b538      	push	{r3, r4, r5, lr}
   b58fa:	4b10      	ldr	r3, [pc, #64]	; (b593c <srand+0x44>)
   b58fc:	681d      	ldr	r5, [r3, #0]
   b58fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5900:	4604      	mov	r4, r0
   b5902:	b9b3      	cbnz	r3, b5932 <srand+0x3a>
   b5904:	2018      	movs	r0, #24
   b5906:	f7ff faa5 	bl	b4e54 <malloc>
   b590a:	4602      	mov	r2, r0
   b590c:	63a8      	str	r0, [r5, #56]	; 0x38
   b590e:	b920      	cbnz	r0, b591a <srand+0x22>
   b5910:	4b0b      	ldr	r3, [pc, #44]	; (b5940 <srand+0x48>)
   b5912:	480c      	ldr	r0, [pc, #48]	; (b5944 <srand+0x4c>)
   b5914:	2142      	movs	r1, #66	; 0x42
   b5916:	f7ff fab5 	bl	b4e84 <__assert_func>
   b591a:	490b      	ldr	r1, [pc, #44]	; (b5948 <srand+0x50>)
   b591c:	4b0b      	ldr	r3, [pc, #44]	; (b594c <srand+0x54>)
   b591e:	e9c0 1300 	strd	r1, r3, [r0]
   b5922:	4b0b      	ldr	r3, [pc, #44]	; (b5950 <srand+0x58>)
   b5924:	6083      	str	r3, [r0, #8]
   b5926:	230b      	movs	r3, #11
   b5928:	8183      	strh	r3, [r0, #12]
   b592a:	2100      	movs	r1, #0
   b592c:	2001      	movs	r0, #1
   b592e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5934:	2200      	movs	r2, #0
   b5936:	611c      	str	r4, [r3, #16]
   b5938:	615a      	str	r2, [r3, #20]
   b593a:	bd38      	pop	{r3, r4, r5, pc}
   b593c:	2003e568 	.word	0x2003e568
   b5940:	000b5bc1 	.word	0x000b5bc1
   b5944:	000b5bd8 	.word	0x000b5bd8
   b5948:	abcd330e 	.word	0xabcd330e
   b594c:	e66d1234 	.word	0xe66d1234
   b5950:	0005deec 	.word	0x0005deec

000b5954 <__register_exitproc>:
   b5954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5958:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5a14 <__register_exitproc+0xc0>
   b595c:	4606      	mov	r6, r0
   b595e:	f8d8 0000 	ldr.w	r0, [r8]
   b5962:	461f      	mov	r7, r3
   b5964:	460d      	mov	r5, r1
   b5966:	4691      	mov	r9, r2
   b5968:	f000 f856 	bl	b5a18 <__retarget_lock_acquire_recursive>
   b596c:	4b25      	ldr	r3, [pc, #148]	; (b5a04 <__register_exitproc+0xb0>)
   b596e:	681c      	ldr	r4, [r3, #0]
   b5970:	b934      	cbnz	r4, b5980 <__register_exitproc+0x2c>
   b5972:	4c25      	ldr	r4, [pc, #148]	; (b5a08 <__register_exitproc+0xb4>)
   b5974:	601c      	str	r4, [r3, #0]
   b5976:	4b25      	ldr	r3, [pc, #148]	; (b5a0c <__register_exitproc+0xb8>)
   b5978:	b113      	cbz	r3, b5980 <__register_exitproc+0x2c>
   b597a:	681b      	ldr	r3, [r3, #0]
   b597c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5980:	6863      	ldr	r3, [r4, #4]
   b5982:	2b1f      	cmp	r3, #31
   b5984:	dd07      	ble.n	b5996 <__register_exitproc+0x42>
   b5986:	f8d8 0000 	ldr.w	r0, [r8]
   b598a:	f000 f847 	bl	b5a1c <__retarget_lock_release_recursive>
   b598e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5996:	b34e      	cbz	r6, b59ec <__register_exitproc+0x98>
   b5998:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b599c:	b988      	cbnz	r0, b59c2 <__register_exitproc+0x6e>
   b599e:	4b1c      	ldr	r3, [pc, #112]	; (b5a10 <__register_exitproc+0xbc>)
   b59a0:	b923      	cbnz	r3, b59ac <__register_exitproc+0x58>
   b59a2:	f8d8 0000 	ldr.w	r0, [r8]
   b59a6:	f000 f838 	bl	b5a1a <__retarget_lock_release>
   b59aa:	e7f0      	b.n	b598e <__register_exitproc+0x3a>
   b59ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b59b0:	f7ff fa50 	bl	b4e54 <malloc>
   b59b4:	2800      	cmp	r0, #0
   b59b6:	d0f4      	beq.n	b59a2 <__register_exitproc+0x4e>
   b59b8:	2300      	movs	r3, #0
   b59ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b59be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b59c2:	6863      	ldr	r3, [r4, #4]
   b59c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b59c8:	2201      	movs	r2, #1
   b59ca:	409a      	lsls	r2, r3
   b59cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b59d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b59d4:	4313      	orrs	r3, r2
   b59d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b59da:	2e02      	cmp	r6, #2
   b59dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b59e0:	bf02      	ittt	eq
   b59e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b59e6:	4313      	orreq	r3, r2
   b59e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b59ec:	6863      	ldr	r3, [r4, #4]
   b59ee:	f8d8 0000 	ldr.w	r0, [r8]
   b59f2:	1c5a      	adds	r2, r3, #1
   b59f4:	3302      	adds	r3, #2
   b59f6:	6062      	str	r2, [r4, #4]
   b59f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b59fc:	f000 f80e 	bl	b5a1c <__retarget_lock_release_recursive>
   b5a00:	2000      	movs	r0, #0
   b5a02:	e7c6      	b.n	b5992 <__register_exitproc+0x3e>
   b5a04:	2003e7e8 	.word	0x2003e7e8
   b5a08:	2003e75c 	.word	0x2003e75c
   b5a0c:	00000000 	.word	0x00000000
   b5a10:	000b4e55 	.word	0x000b4e55
   b5a14:	2003e5cc 	.word	0x2003e5cc

000b5a18 <__retarget_lock_acquire_recursive>:
   b5a18:	4770      	bx	lr

000b5a1a <__retarget_lock_release>:
   b5a1a:	4770      	bx	lr

000b5a1c <__retarget_lock_release_recursive>:
   b5a1c:	4770      	bx	lr

000b5a1e <link_code_end>:
	...

000b5a20 <dynalib_user>:
   b5a20:	43f5 000b 4431 000b 4459 000b 445d 000b     .C..1D..YD..]D..
   b5a30:	0000 0000 6576 7463 726f 3a3a 4d5f 725f     ....vector::_M_r
   b5a40:	6165 6c6c 636f 695f 736e 7265 0074 0000     ealloc_insert...

000b5a50 <_ZTVN5spark13EthernetClassE>:
	...
   b5a58:	4f33 000b 4f29 000b 4f1f 000b 4f15 000b     3O..)O...O...O..
   b5a68:	4f09 000b 4efd 000b 5125 000b 512d 000b     .O...N..%Q..-Q..
   b5a78:	4ef1 000b 4ee9 000b 4edf 000b 4ed5 000b     .N...N...N...N..
   b5a88:	515d 000b                                   ]Q..

000b5a8c <_ZTV7TwoWire>:
	...
   b5a94:	4f51 000b 4f9b 000b 4f73 000b 4f53 000b     QO...O..sO..SO..
   b5aa4:	4f7b 000b 4f83 000b 4f8b 000b 4f93 000b     {O...O...O...O..

000b5ab4 <_ZTV9IPAddress>:
	...
   b5abc:	4ff5 000b 4fe5 000b 4fe7 000b 7061 0070     .O...O...O..app.

000b5acc <_ZTVN5spark12NetworkClassE>:
	...
   b5ad4:	50e5 000b 50ef 000b 50f9 000b 5103 000b     .P...P...P...Q..
   b5ae4:	510d 000b 5119 000b 5125 000b 512d 000b     .Q...Q..%Q..-Q..
   b5af4:	5135 000b 5141 000b 5149 000b 5153 000b     5Q..AQ..IQ..SQ..
   b5b04:	515d 000b 5925 252d 2d6d 6425 2554 3a48     ]Q..%Y-%m-%dT%H:
   b5b14:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5b24 <_ZTV11USARTSerial>:
	...
   b5b2c:	5335 000b 53a1 000b 5379 000b 5249 000b     5S...S..yS..IR..
   b5b3c:	5349 000b 5365 000b 5357 000b 5373 000b     IS..eS..WS..sS..
   b5b4c:	5337 000b 533b 000b                         7S..;S..

000b5b54 <_ZTV9USBSerial>:
	...
   b5b5c:	53df 000b 5447 000b 541d 000b 5249 000b     .S..GT...T..IR..
   b5b6c:	540f 000b 53e1 000b 53f1 000b 5441 000b     .T...S...S..AT..
   b5b7c:	5401 000b 53d9 000b                         .T...S..

000b5b84 <_ZTVN5spark9WiFiClassE>:
	...
   b5b8c:	5537 000b 552d 000b 5523 000b 54d9 000b     7U..-U..#U...T..
   b5b9c:	5517 000b 550b 000b 5125 000b 512d 000b     .U...U..%Q..-Q..
   b5bac:	54ff 000b 54f7 000b 54ed 000b 54e3 000b     .T...T...T...T..
   b5bbc:	515d 000b                                   ]Q..

000b5bc0 <_ZSt7nothrow>:
   b5bc0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5bd0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5be0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5bf0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5c00:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5c10:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5c20:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5c31 <link_const_data_end>:
   b5c31:	00          	.byte	0x00
	...

000b5c34 <link_constructors_location>:
   b5c34:	000b4a81 	.word	0x000b4a81
   b5c38:	000b4ec5 	.word	0x000b4ec5
   b5c3c:	000b4f3d 	.word	0x000b4f3d
   b5c40:	000b50d5 	.word	0x000b50d5
   b5c44:	000b5235 	.word	0x000b5235
   b5c48:	000b52dd 	.word	0x000b52dd
   b5c4c:	000b52fd 	.word	0x000b52fd
   b5c50:	000b5321 	.word	0x000b5321
   b5c54:	000b5541 	.word	0x000b5541
